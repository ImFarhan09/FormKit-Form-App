{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { extend, camel, has, isPojo, eq, slugify, undefine, clone, token, isObject } from '@formkit/utils';\nimport { createMessage, warn, isConditional, isComponent, isDOM } from '@formkit/core';\n\n/**\n * Creates a plugin based on a list of {@link @formkit/core#FormKitLibrary | FormKitLibrary}.\n *\n * @param libraries - One or many {@link @formkit/core#FormKitLibrary | FormKitLibrary}.\n *\n * @returns {@link @formkit/core#FormKitPlugin | FormKitPlugin}\n *\n * @public\n */\nfunction createLibraryPlugin(...libraries) {\n  /**\n   * Merge all provided library items.\n   */\n  const library = libraries.reduce((merged, lib) => extend(merged, lib), {});\n  /* eslint-disable-next-line @typescript-eslint/no-empty-function */\n  const plugin = () => {};\n  /**\n   * Enables the hook that exposes all library inputs.\n   * @param node - The primary plugin\n   */\n  plugin.library = function (node) {\n    const type = camel(node.props.type);\n    if (has(library, type)) {\n      node.define(library[type]);\n    }\n  };\n  return plugin;\n}\n\n/**\n * A function to normalize an array of objects, array of strings, or object of\n * key-values to use an array of objects with value and label properties.\n *\n * @param options - An un-normalized {@link FormKitOptionsProp | FormKitOptionsProp}.\n *\n * @returns A list of {@link FormKitOptionsList | FormKitOptionsList}.\n *\n * @public\n */\nfunction normalizeOptions(options) {\n  let i = 1;\n  if (Array.isArray(options)) {\n    return options.map(option => {\n      if (typeof option === 'string' || typeof option === 'number') {\n        return {\n          label: String(option),\n          value: String(option)\n        };\n      }\n      if (typeof option == 'object') {\n        if ('value' in option && typeof option.value !== 'string') {\n          Object.assign(option, {\n            value: `__mask_${i++}`,\n            __original: option.value\n          });\n        }\n      }\n      return option;\n    });\n  }\n  return Object.keys(options).map(value => {\n    return {\n      label: options[value],\n      value\n    };\n  });\n}\n/**\n * Given an {@link FormKitOptionsList | FormKitOptionsList}, find the real value in the options.\n *\n * @param options - The {@link FormKitOptionsList | FormKitOptionsList} to check for a given value\n * @param value - The value to return\n *\n * @returns `unknown`\n *\n * @public\n */\nfunction optionValue(options, value) {\n  if (Array.isArray(options)) {\n    for (const option of options) {\n      if (value == option.value) {\n        return '__original' in option ? option.__original : option.value;\n      }\n    }\n  }\n  return value;\n}\n/**\n * Determines if the value should be selected.\n *\n * @param valueA - Any type of value\n * @param valueB - Any type of value\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction shouldSelect(valueA, valueB) {\n  if (valueA === null && valueB === undefined || valueA === undefined && valueB === null) return false;\n  if (valueA == valueB) return true;\n  if (isPojo(valueA) && isPojo(valueB)) return eq(valueA, valueB);\n  return false;\n}\n/**\n * A feature that converts the options prop to usable values, to be used by a\n * feature or a plugin.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction options(node) {\n  node.hook.prop((prop, next) => {\n    if (prop.prop === 'options') {\n      if (typeof prop.value === 'function') {\n        node.props.optionsLoader = prop.value;\n        prop.value = [];\n      } else {\n        prop.value = normalizeOptions(prop.value);\n      }\n    }\n    return next(prop);\n  });\n}\n\n/**\n * Outer section where most data attributes are assigned.\n *\n * @public\n */\nconst outer = createSection('outer', () => ({\n  $el: 'div',\n  attrs: {\n    key: '$id',\n    'data-family': '$family || undefined',\n    'data-type': '$type',\n    'data-multiple': '$attrs.multiple || ($type != \"select\" && $options != undefined) || undefined',\n    'data-disabled': '$disabled || undefined',\n    'data-complete': '$state.complete || undefined',\n    'data-invalid': '$state.valid === false && $state.validationVisible || undefined',\n    'data-errors': '$state.errors || undefined',\n    'data-submitted': '$state.submitted || undefined',\n    'data-prefix-icon': '$_rawPrefixIcon !== undefined || undefined',\n    'data-suffix-icon': '$_rawSuffixIcon !== undefined || undefined',\n    'data-prefix-icon-click': '$onPrefixIconClick !== undefined || undefined',\n    'data-suffix-icon-click': '$onSuffixIconClick !== undefined || undefined'\n  }\n}), true);\n\n/**\n * Inner section\n *\n * @public\n */\nconst inner = createSection('inner', 'div');\n\n/**\n * Wrapper input section\n *\n * @public\n */\nconst wrapper = createSection('wrapper', 'div');\n\n/**\n * Label section with label element\n *\n * @public\n */\nconst label = createSection('label', () => ({\n  $el: 'label',\n  if: '$label',\n  attrs: {\n    for: '$id'\n  }\n}));\n\n/**\n * Messages section where all messages will be displayed.\n *\n * @public\n */\nconst messages = createSection('messages', () => ({\n  $el: 'ul',\n  if: '$defaultMessagePlacement && $fns.length($messages)'\n}));\n\n/**\n * Message section, shows a group of messages.\n *\n * @public\n */\nconst message = createSection('message', () => ({\n  $el: 'li',\n  for: ['message', '$messages'],\n  attrs: {\n    key: '$message.key',\n    id: `$id + '-' + $message.key`,\n    'data-message-type': '$message.type'\n  }\n}));\n\n/**\n * Prefix section\n *\n * @public\n */\nconst prefix = createSection('prefix', null);\n\n/**\n * Suffix section\n *\n * @public\n */\nconst suffix = createSection('suffix', null);\n\n/**\n * Help section that shows help text\n *\n * @public\n */\nconst help = createSection('help', () => ({\n  $el: 'div',\n  if: '$help',\n  attrs: {\n    id: '$: \"help-\" + $id'\n  }\n}));\n\n/**\n * Fieldset section, used to describe help\n *\n * @public\n */\nconst fieldset = createSection('fieldset', () => ({\n  $el: 'fieldset',\n  attrs: {\n    id: '$id',\n    'aria-describedby': {\n      if: '$help',\n      then: '$: \"help-\" + $id',\n      else: undefined\n    }\n  }\n}));\n\n/**\n * Decorator section\n *\n * @public\n */\nconst decorator = createSection('decorator', () => ({\n  $el: 'span',\n  attrs: {\n    'aria-hidden': 'true'\n  }\n}));\n\n/**\n * Box section used for grouping options\n *\n * @public\n */\nconst box = createSection('input', () => ({\n  $el: 'input',\n  bind: '$attrs',\n  attrs: {\n    type: '$type',\n    name: '$node.props.altName || $node.name',\n    disabled: '$option.attrs.disabled || $disabled',\n    onInput: '$handlers.toggleChecked',\n    checked: '$fns.eq($_value, $onValue)',\n    onBlur: '$handlers.blur',\n    value: '$: true',\n    id: '$id',\n    'aria-describedby': {\n      if: '$options.length',\n      then: {\n        if: '$option.help',\n        then: '$: \"help-\" + $option.attrs.id',\n        else: undefined\n      },\n      else: {\n        if: '$help',\n        then: '$: \"help-\" + $id',\n        else: undefined\n      }\n    }\n  }\n}));\n\n/**\n * Legend section, used instead of label when its grouping fields.\n *\n * @public\n */\nconst legend = createSection('legend', () => ({\n  $el: 'legend',\n  if: '$label'\n}));\n\n/**\n * Option section used to show an option\n *\n * @public\n */\nconst boxOption = createSection('option', () => ({\n  $el: 'li',\n  for: ['option', '$options'],\n  attrs: {\n    'data-disabled': '$option.attrs.disabled || $disabled'\n  }\n}));\n\n/**\n * Options section used to wrap all option sections in a list\n *\n * @public\n */\nconst boxOptions = createSection('options', 'ul');\n\n/**\n * Wrapper section for options\n *\n * @public\n */\nconst boxWrapper = createSection('wrapper', () => ({\n  $el: 'label',\n  attrs: {\n    'data-disabled': {\n      if: '$options.length',\n      then: undefined,\n      else: '$disabled || undefined'\n    },\n    'data-checked': {\n      if: '$options == undefined',\n      then: '$fns.eq($_value, $onValue) || undefined',\n      else: '$fns.isChecked($option.value) || undefined'\n    }\n  }\n}));\n\n/**\n * Option help section\n *\n * @public\n */\nconst boxHelp = createSection('optionHelp', () => ({\n  $el: 'div',\n  if: '$option.help',\n  attrs: {\n    id: '$: \"help-\" + $option.attrs.id'\n  }\n}));\n\n/**\n * Label section for options\n *\n * @public\n */\nconst boxLabel = createSection('label', 'span');\n\n/**\n * Input section for a button\n *\n * @public\n */\nconst buttonInput = createSection('input', () => ({\n  $el: 'button',\n  bind: '$attrs',\n  attrs: {\n    type: '$type',\n    disabled: '$disabled',\n    name: '$node.name',\n    id: '$id'\n  }\n}));\n\n/**\n * Default section for a button\n *\n * @public\n */\nconst buttonLabel = createSection('default', null);\n\n/**\n * Input section for a file input\n *\n * @public\n */\nconst fileInput = createSection('input', () => ({\n  $el: 'input',\n  bind: '$attrs',\n  attrs: {\n    type: 'file',\n    disabled: '$disabled',\n    name: '$node.name',\n    onChange: '$handlers.files',\n    onBlur: '$handlers.blur',\n    id: '$id',\n    'aria-describedby': '$describedBy'\n  }\n}));\n\n/**\n * File item section for showing a file name\n *\n * @public\n */\nconst fileItem = createSection('fileItem', () => ({\n  $el: 'li',\n  for: ['file', '$value']\n}));\n\n/**\n * File list section to show all file names\n *\n * @public\n */\nconst fileList = createSection('fileList', () => ({\n  $el: 'ul',\n  if: '$value.length',\n  attrs: {\n    'data-has-multiple': {\n      if: '$value.length > 1',\n      then: 'true'\n    }\n  }\n}));\n\n/**\n * File name section to show the file name\n *\n * @public\n */\nconst fileName = createSection('fileName', () => ({\n  $el: 'span',\n  attrs: {\n    class: '$classes.fileName'\n  }\n}));\n\n/**\n * File remove section to show a remove button for files\n *\n * @public\n */\nconst fileRemove = createSection('fileRemove', () => ({\n  $el: 'button',\n  attrs: {\n    onClick: '$handlers.resetFiles'\n  }\n}));\n\n/**\n * No file section that shows when there is no files\n *\n * @public\n */\nconst noFiles = createSection('noFiles', () => ({\n  $el: 'span',\n  if: '$value.length == 0'\n}));\n\n/**\n * Form section\n *\n * @public\n */\nconst formInput = createSection('form', () => ({\n  $el: 'form',\n  bind: '$attrs',\n  attrs: {\n    id: '$id',\n    name: '$node.name',\n    onSubmit: '$handlers.submit',\n    'data-loading': '$state.loading || undefined'\n  }\n}), true);\n\n/**\n * Actions section that shows the action buttons\n *\n * @public\n */\nconst actions = createSection('actions', () => ({\n  $el: 'div',\n  if: '$actions'\n}));\n\n/**\n * Submit section that displays a submit button from a form\n *\n * @public\n */\nconst submitInput = createSection('submit', () => ({\n  $cmp: 'FormKit',\n  bind: '$submitAttrs',\n  props: {\n    type: 'submit',\n    disabled: '$disabled',\n    label: '$submitLabel'\n  }\n}));\n\n/**\n * Input section\n *\n * @public\n */\nconst textInput = createSection('input', () => ({\n  $el: 'input',\n  bind: '$attrs',\n  attrs: {\n    type: '$type',\n    disabled: '$disabled',\n    name: '$node.name',\n    onInput: '$handlers.DOMInput',\n    onBlur: '$handlers.blur',\n    value: '$_value',\n    id: '$id',\n    'aria-describedby': '$describedBy'\n  }\n}));\n\n/**\n * A simple fragment section\n *\n * @public\n */\nconst fragment = createSection('wrapper', null, true);\n\n/**\n * Input section used by selects\n *\n * @public\n */\nconst selectInput$1 = createSection('input', () => ({\n  $el: 'select',\n  bind: '$attrs',\n  attrs: {\n    id: '$id',\n    'data-placeholder': '$fns.showPlaceholder($_value, $placeholder)',\n    disabled: '$disabled',\n    class: '$classes.input',\n    name: '$node.name',\n    onChange: '$handlers.onChange',\n    onInput: '$handlers.selectInput',\n    onBlur: '$handlers.blur',\n    'aria-describedby': '$describedBy'\n  }\n}));\n\n/**\n * Option section used to show options\n *\n * @public\n */\nconst option = createSection('option', () => ({\n  $el: 'option',\n  for: ['option', '$options'],\n  bind: '$option.attrs',\n  attrs: {\n    class: '$classes.option',\n    value: '$option.value',\n    selected: '$fns.isSelected($option)'\n  }\n}));\n\n/**\n * Options slot section that displays options when used with slots\n *\n * @public\n */\nconst optionSlot = () => ({\n  $el: null,\n  if: '$options.length',\n  for: ['option', '$options'],\n  children: '$slots.option'\n});\n\n/**\n * Input section used by textarea inputs\n *\n * @public\n */\nconst textareaInput = createSection('input', () => ({\n  $el: 'textarea',\n  bind: '$attrs',\n  attrs: {\n    disabled: '$disabled',\n    name: '$node.name',\n    onInput: '$handlers.DOMInput',\n    onBlur: '$handlers.blur',\n    value: '$_value',\n    id: '$id',\n    'aria-describedby': '$describedBy'\n  },\n  children: '$initialValue'\n}));\n\n/**\n * Icon section used by all icons\n *\n * @public\n */\nconst icon = (sectionKey, el) => {\n  return createSection(`${sectionKey}Icon`, () => {\n    const rawIconProp = `_raw${sectionKey.charAt(0).toUpperCase()}${sectionKey.slice(1)}Icon`;\n    return {\n      if: `$${sectionKey}Icon && $${rawIconProp}`,\n      $el: `${el ? el : 'span'}`,\n      attrs: {\n        class: `$classes.${sectionKey}Icon + \" formkit-icon\"`,\n        innerHTML: `$${rawIconProp}`,\n        onClick: `$handlers.iconClick(${sectionKey})`,\n        for: {\n          if: `${el === 'label'}`,\n          then: '$id'\n        }\n      }\n    };\n  })();\n};\n\n/**\n * A feature that normalizes box types (checkboxes, radios).\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @returns A {@link @formkit/node#FormKitMiddleware | FormKitMiddleware}.\n *\n * @public\n */\nfunction normalizeBoxes(node) {\n  return function (prop, next) {\n    if (prop.prop === 'options' && Array.isArray(prop.value)) {\n      prop.value = prop.value.map(option => {\n        var _a;\n        if (!((_a = option.attrs) === null || _a === void 0 ? void 0 : _a.id)) {\n          return extend(option, {\n            attrs: {\n              id: `${node.name}-option-${slugify(String(option.value))}`\n            }\n          });\n        }\n        return option;\n      });\n      if (node.props.type === 'checkbox' && !Array.isArray(node.value)) {\n        if (node.isCreated) {\n          node.input([], false);\n        } else {\n          node.on('created', () => {\n            if (!Array.isArray(node.value)) {\n              node.input([], false);\n            }\n          });\n        }\n      }\n    }\n    return next(prop);\n  };\n}\n\n/**\n * Event handler when an input is toggled.\n *\n * @param node - The {@link @formkit/node#FormKitNode | FormKitNode} being toggled.\n * @param e - The input event related to the toggling.\n *\n * @public\n */\nfunction toggleChecked$1(node, e) {\n  const el = e.target;\n  if (el instanceof HTMLInputElement) {\n    const value = Array.isArray(node.props.options) ? optionValue(node.props.options, el.value) : el.value;\n    if (Array.isArray(node.props.options) && node.props.options.length) {\n      if (!Array.isArray(node._value)) {\n        // There is no array value set\n        node.input([value]);\n      } else if (!node._value.some(existingValue => shouldSelect(value, existingValue))) {\n        // The value is not in the current set\n        node.input([...node._value, value]);\n      } else {\n        // Filter out equivalent values\n        node.input(node._value.filter(existingValue => !shouldSelect(value, existingValue)));\n      }\n    } else {\n      if (el.checked) {\n        node.input(node.props.onValue);\n      } else {\n        node.input(node.props.offValue);\n      }\n    }\n  }\n}\n/**\n * Checks if a given option is present in the node value.\n *\n * @param node - The The {@link @formkit/node#FormKitNode | FormKitNode} being checked.\n * @param value - The value of any option.\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction isChecked$1(node, value) {\n  var _a, _b;\n  // We need to force vue’s reactivity to respond when the value is run:\n  (_a = node.context) === null || _a === void 0 ? void 0 : _a.value;\n  (_b = node.context) === null || _b === void 0 ? void 0 : _b._value;\n  if (Array.isArray(node._value)) {\n    return node._value.some(existingValue => shouldSelect(optionValue(node.props.options, value), existingValue));\n  }\n  return false;\n}\n/**\n * A feature that adds checkbox selection support.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction checkboxes(node) {\n  node.on('created', () => {\n    var _a, _b;\n    if ((_a = node.context) === null || _a === void 0 ? void 0 : _a.handlers) {\n      node.context.handlers.toggleChecked = toggleChecked$1.bind(null, node);\n    }\n    if ((_b = node.context) === null || _b === void 0 ? void 0 : _b.fns) {\n      node.context.fns.isChecked = isChecked$1.bind(null, node);\n    }\n    // Configure our default onValue and offValue\n    if (!has(node.props, 'onValue')) node.props.onValue = true;\n    if (!has(node.props, 'offValue')) node.props.offValue = false;\n  });\n  node.hook.prop(normalizeBoxes(node));\n}\n\n/**\n * A feature that allows disabling children of this node.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction disables(node) {\n  node.on('created', () => {\n    node.props.disabled = undefine(node.props.disabled);\n  });\n  node.hook.prop(({\n    prop,\n    value\n  }, next) => {\n    value = prop === 'disabled' ? undefine(value) : value;\n    return next({\n      prop,\n      value\n    });\n  });\n  node.on('prop:disabled', ({\n    payload: value\n  }) => {\n    node.config.disabled = undefine(value);\n  });\n  node.on('created', () => {\n    node.config.disabled = undefine(node.props.disabled);\n  });\n}\n\n/**\n * Creates a new feature that generates a localization message of type ui\n * for use on a given component.\n *\n * @param key - The key of the message.\n * @param value - The value of the message.\n *\n * @returns A {@link @formkit/core#FormKitPlugin | FormKitPlugin}.\n *\n * @public\n */\nfunction localize(key, value) {\n  return node => {\n    node.store.set(createMessage({\n      key,\n      type: 'ui',\n      value: value || key,\n      meta: {\n        localize: true,\n        i18nArgs: [node]\n      }\n    }));\n  };\n}\nconst isBrowser = typeof window !== 'undefined';\n/**\n * Remove the data-file-hover attribute from the target.\n *\n * @param e - Event\n *\n * @internal\n */\nfunction removeHover(e) {\n  if (e.target instanceof HTMLElement && e.target.hasAttribute('data-file-hover')) {\n    e.target.removeAttribute('data-file-hover');\n  }\n}\n/**\n * Prevent stray drag/drop events from navigating the window.\n *\n * @param e - Event\n *\n * @internal\n */\nfunction preventStrayDrop(type, e) {\n  if (!(e.target instanceof HTMLInputElement)) {\n    e.preventDefault();\n  } else if (type === 'dragover') {\n    e.target.setAttribute('data-file-hover', 'true');\n  }\n  if (type === 'drop') {\n    removeHover(e);\n  }\n}\n/**\n * A feature to add file handling support to an input.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction files(node) {\n  // Localize our content:\n  localize('noFiles', 'Select file')(node);\n  localize('removeAll', 'Remove all')(node);\n  localize('remove')(node);\n  if (isBrowser) {\n    if (!window._FormKit_File_Drop) {\n      window.addEventListener('dragover', preventStrayDrop.bind(null, 'dragover'));\n      window.addEventListener('drop', preventStrayDrop.bind(null, 'drop'));\n      window.addEventListener('dragleave', removeHover);\n      window._FormKit_File_Drop = true;\n    }\n  }\n  node.hook.input((value, next) => next(Array.isArray(value) ? value : []));\n  node.on('created', () => {\n    if (!Array.isArray(node.value)) node.input([], false);\n    if (!node.context) return;\n    node.context.handlers.resetFiles = e => {\n      e.preventDefault();\n      node.input([]);\n      if (node.props.id && isBrowser) {\n        const el = document.getElementById(node.props.id);\n        if (el) el.value = '';\n      }\n    };\n    node.context.handlers.files = e => {\n      var _a, _b;\n      const files = [];\n      if (e.target instanceof HTMLInputElement && e.target.files) {\n        for (let i = 0; i < e.target.files.length; i++) {\n          let file;\n          if (file = e.target.files.item(i)) {\n            files.push({\n              name: file.name,\n              file\n            });\n          }\n        }\n        node.input(files);\n      }\n      if (node.context) node.context.files = files;\n      // Call the original listener if there is one.\n      if (typeof ((_a = node.props.attrs) === null || _a === void 0 ? void 0 : _a.onChange) === 'function') {\n        (_b = node.props.attrs) === null || _b === void 0 ? void 0 : _b.onChange(e);\n      }\n    };\n  });\n}\n\n/**\n * Handle the submit event.\n *\n * @param e - The event\n *\n * @internal\n */\nasync function handleSubmit(node, submitEvent) {\n  submitEvent.preventDefault();\n  await node.settled;\n  // Set the submitted state on all children\n  const setSubmitted = n => n.store.set(createMessage({\n    key: 'submitted',\n    value: true,\n    visible: false\n  }));\n  node.walk(setSubmitted);\n  setSubmitted(node);\n  if (typeof node.props.onSubmitRaw === 'function') {\n    node.props.onSubmitRaw(submitEvent, node);\n  }\n  if (node.ledger.value('blocking')) {\n    if (typeof node.props.onSubmitInvalid === 'function') {\n      node.props.onSubmitInvalid(node);\n    }\n    // There is still a blocking message in the store.\n    if (node.props.incompleteMessage !== false) {\n      node.store.set(createMessage({\n        blocking: false,\n        key: `incomplete`,\n        meta: {\n          localize: node.props.incompleteMessage === undefined,\n          i18nArgs: [{\n            node\n          }],\n          showAsMessage: true\n        },\n        type: 'ui',\n        value: node.props.incompleteMessage || 'Form incomplete.'\n      }));\n    }\n  } else {\n    // No blocking messages\n    if (typeof node.props.onSubmit === 'function') {\n      // call onSubmit\n      const retVal = node.props.onSubmit(node.hook.submit.dispatch(clone(node.value)), node);\n      if (retVal instanceof Promise) {\n        const autoDisable = node.props.disabled === undefined && node.props.submitBehavior !== 'live';\n        if (autoDisable) node.props.disabled = true;\n        node.store.set(createMessage({\n          key: 'loading',\n          value: true,\n          visible: false\n        }));\n        await retVal;\n        if (autoDisable) node.props.disabled = false;\n        node.store.remove('loading');\n      }\n    } else {\n      if (submitEvent.target instanceof HTMLFormElement) {\n        submitEvent.target.submit();\n      }\n    }\n  }\n}\n/**\n * A feature to add a submit handler and actions section.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction form$1(node) {\n  node.props.isForm = true;\n  node.on('created', () => {\n    var _a;\n    if ((_a = node.context) === null || _a === void 0 ? void 0 : _a.handlers) {\n      node.context.handlers.submit = handleSubmit.bind(null, node);\n    }\n    if (!has(node.props, 'actions')) {\n      node.props.actions = true;\n    }\n  });\n  node.on('settled:blocking', () => node.store.remove('incomplete'));\n}\n\n/**\n * A feature that applies `ignore=\"true\"` by default.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction ignore(node) {\n  if (node.props.ignore === undefined) {\n    node.props.ignore = true;\n    node.parent = null;\n  }\n}\n\n/**\n * A feature that ensures the input has an `initialValue` prop.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction initialValue(node) {\n  node.on('created', () => {\n    if (node.context) {\n      node.context.initialValue = node.value || '';\n    }\n  });\n}\n\n/**\n * Sets the value of a radio button when checked.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n * @param event - Event\n *\n * @public\n */\nfunction toggleChecked(node, event) {\n  if (event.target instanceof HTMLInputElement) {\n    node.input(optionValue(node.props.options, event.target.value));\n  }\n}\n/**\n * Checks if the value being checked is the current value.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n * @param value - The value to check\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction isChecked(node, value) {\n  var _a, _b;\n  // We need to force vue’s reactivity to respond when the value is run:\n  (_a = node.context) === null || _a === void 0 ? void 0 : _a.value;\n  (_b = node.context) === null || _b === void 0 ? void 0 : _b._value;\n  return shouldSelect(optionValue(node.props.options, value), node._value);\n}\n/**\n * A feature to check if the value being checked is the current value.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction radios(node) {\n  node.on('created', () => {\n    var _a, _b;\n    if (!Array.isArray(node.props.options)) {\n      warn(350, node);\n    }\n    if ((_a = node.context) === null || _a === void 0 ? void 0 : _a.handlers) {\n      node.context.handlers.toggleChecked = toggleChecked.bind(null, node);\n    }\n    if ((_b = node.context) === null || _b === void 0 ? void 0 : _b.fns) {\n      node.context.fns.isChecked = isChecked.bind(null, node);\n    }\n  });\n  node.hook.prop(normalizeBoxes(node));\n}\n\n/**\n * Checks if a the given option should have the selected attribute.\n * @param node - The node being evaluated.\n * @param option - The option value to check\n * @returns\n * @public\n */\nfunction isSelected(node, option) {\n  // Here we trick reactivity (if at play) to watch this function.\n  node.context && node.context.value;\n  const optionValue = '__original' in option ? option.__original : option.value;\n  function hasNoNullOption() {\n    return !node.props.options.some(option => ('__original' in option ? option.__original : option.value) === null);\n  }\n  return Array.isArray(node._value) ? node._value.some(optionA => shouldSelect(optionA, optionValue)) : (node._value === undefined || node._value === null && hasNoNullOption()) && option.attrs && option.attrs['data-is-placeholder'] ? true : shouldSelect(optionValue, node._value);\n}\n/**\n * Defers the change event till after the next cycle.\n * @param node - The node being evaluated.\n * @param e - The change event.\n */\nasync function deferChange(node, e) {\n  var _a;\n  if (typeof ((_a = node.props.attrs) === null || _a === void 0 ? void 0 : _a.onChange) === 'function') {\n    await new Promise(r => setTimeout(r, 0));\n    await node.settled;\n    node.props.attrs.onChange(e);\n  }\n}\n/**\n * Select the correct values.\n * @param e - The input event emitted by the select.\n */\nfunction selectInput(node, e) {\n  const target = e.target;\n  const value = target.hasAttribute('multiple') ? Array.from(target.selectedOptions).map(o => optionValue(node.props.options, o.value)) : optionValue(node.props.options, target.value);\n  node.input(value);\n}\n/**\n * Appends a placeholder to the options list.\n * @param options - An options list\n * @param placeholder - A placeholder string to append\n * @returns\n */\nfunction applyPlaceholder(options, placeholder) {\n  if (!options.some(option => option.attrs && option.attrs['data-is-placeholder'])) {\n    return [{\n      label: placeholder,\n      value: '',\n      attrs: {\n        hidden: true,\n        disabled: true,\n        'data-is-placeholder': 'true'\n      }\n    }, ...options];\n  }\n  return options;\n}\n/**\n * Converts the options prop to usable values.\n * @param node - A formkit node.\n * @public\n */\nfunction select$1(node) {\n  // Set the initial value of a multi-input\n  node.on('created', () => {\n    var _a, _b, _c;\n    const isMultiple = undefine((_a = node.props.attrs) === null || _a === void 0 ? void 0 : _a.multiple);\n    if (!isMultiple && node.props.placeholder && Array.isArray(node.props.options)) {\n      node.hook.prop(({\n        prop,\n        value\n      }, next) => {\n        if (prop === 'options') {\n          value = applyPlaceholder(value, node.props.placeholder);\n        }\n        return next({\n          prop,\n          value\n        });\n      });\n      node.props.options = applyPlaceholder(node.props.options, node.props.placeholder);\n    }\n    if (isMultiple) {\n      if (node.value === undefined) {\n        node.input([], false);\n      }\n    } else if (node.context && !node.context.options) {\n      // If this input is (probably) using the default slot, we need to add a\n      // \"value\" attribute to get bound\n      node.props.attrs = Object.assign({}, node.props.attrs, {\n        value: node._value\n      });\n      node.on('input', ({\n        payload\n      }) => {\n        node.props.attrs = Object.assign({}, node.props.attrs, {\n          value: payload\n        });\n      });\n    }\n    if ((_b = node.context) === null || _b === void 0 ? void 0 : _b.handlers) {\n      node.context.handlers.selectInput = selectInput.bind(null, node);\n      node.context.handlers.onChange = deferChange.bind(null, node);\n    }\n    if ((_c = node.context) === null || _c === void 0 ? void 0 : _c.fns) {\n      node.context.fns.isSelected = isSelected.bind(null, node);\n      node.context.fns.showPlaceholder = (value, placeholder) => {\n        if (!Array.isArray(node.props.options)) return false;\n        const hasMatchingValue = node.props.options.some(option => {\n          if (option.attrs && 'data-is-placeholder' in option.attrs) return false;\n          const optionValue = '__original' in option ? option.__original : option.value;\n          return eq(value, optionValue);\n        });\n        return placeholder && !hasMatchingValue ? true : undefined;\n      };\n    }\n  });\n  node.hook.input((value, next) => {\n    var _a, _b, _c;\n    if (!node.props.placeholder && value === undefined && Array.isArray((_a = node.props) === null || _a === void 0 ? void 0 : _a.options) && node.props.options.length && !undefine((_c = (_b = node.props) === null || _b === void 0 ? void 0 : _b.attrs) === null || _c === void 0 ? void 0 : _c.multiple)) {\n      value = '__original' in node.props.options[0] ? node.props.options[0].__original : node.props.options[0].value;\n    }\n    return next(value);\n  });\n}\n\n/**\n * Adds icon props definition.\n *\n * @param sectionKey - the location the icon should be loaded.\n * @param defaultIcon - the icon that should be loaded if a match is found in the user's CSS.\n *\n * @returns A {@link @formkit/core#FormKitPlugin | FormKitPlugin}.\n *\n * @public\n */\nfunction defaultIcon(sectionKey, defaultIcon) {\n  return node => {\n    if (node.props[`${sectionKey}Icon`] === undefined) {\n      node.props[`${sectionKey}Icon`] = `default:${defaultIcon}`;\n    }\n  };\n}\n\n/**\n * Type guard for schema objects.\n *\n * @param schema - returns `true` if the node is a schema node but not a string\n * or conditional.\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction isSchemaObject(schema) {\n  return typeof schema === 'object' && ('$el' in schema || '$cmp' in schema || '$formkit' in schema);\n}\n/**\n * Checks if the current schema node is a slot condition.\n *\n * @example\n *\n * ```js\n * {\n *  if: '$slot.name',\n *  then: '$slot.name',\n *  else: []\n * } // this schema node would return true.\n * ```\n *\n * @param node - A {@link @formkit/core#FormKitSchemaNode | FormKitSchemaNode}.\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction isSlotCondition(node) {\n  if (isConditional(node) && node.if && node.if.startsWith('$slots.') && typeof node.then === 'string' && node.then.startsWith('$slots.') && 'else' in node) {\n    return true;\n  }\n  return false;\n}\n/**\n * Finds a seciton by name in a schema.\n *\n * @param schema - A {@link @formkit/core#FormKitSchemaNode | FormKitSchemaNode} array.\n * @param target - The name of the section to find.\n *\n * @returns a tuple of the schema and the section or a tuple of `false` and `false` if not found.\n *\n * @public\n */\nfunction findSection(schema, target) {\n  var _a;\n  for (let index = 0; index < schema.length; index++) {\n    const section = schema[index];\n    if (isSlotCondition(section)) {\n      if (isComponent(section.else) || isDOM(section.else)) {\n        if (((_a = section.else.meta) === null || _a === void 0 ? void 0 : _a.section) === target) {\n          return [schema, section];\n        } else if (section.else.children && Array.isArray(section.else.children) && section.else.children.length) {\n          const found = findSection(section.else.children, target);\n          if (found[0]) {\n            return found;\n          }\n        }\n      }\n    }\n  }\n  return [false, false];\n}\n/**\n * Extends a single schema node with an extension. The extension can be any\n * partial node including strings.\n *\n * @param schema - The base schema node.\n * @param extension - The values to extend on the base schema node.\n *\n * @returns {@link @formkit/core#FormKitSchemaNode | FormKitSchemaNode}\n *\n * @public\n */\nfunction extendSchema(schema, extension = {}) {\n  if (typeof schema === 'string') {\n    return isSchemaObject(extension) || typeof extension === 'string' ? extension : schema;\n  } else if (Array.isArray(schema)) {\n    return isSchemaObject(extension) ? extension : schema;\n  }\n  return extend(schema, extension);\n}\n/**\n * @deprecated This function is deprecated. Use `createSection` instead!\n *\n * @param key - A new section key name.\n * @param schema - The default schema in this composable slot.\n *\n * @returns {@link @formkit/core#FormKitSchemaComposable | FormKitSchemaComposable}\n *\n * @public\n */\nfunction composable(key, schema) {\n  warn(800, 'composable function');\n  return (extendWith = {}, children = undefined) => {\n    const root = typeof schema === 'function' ? schema(children) : typeof schema === 'object' ? clone(schema) : schema;\n    const isObj = isSchemaObject(root);\n    if (isObj && !('children' in root) && children) {\n      if (Array.isArray(children)) {\n        if (children.length) {\n          root.children = children;\n        }\n      } else {\n        root.children = [children];\n      }\n    }\n    const extended = extendSchema(root, extendWith);\n    return {\n      if: `$slots.${key}`,\n      then: `$slots.${key}`,\n      else: Array.isArray(extended) ? extended : [extended]\n    };\n  };\n}\n/**\n * Creates an input schema with all of the wrapping base schema.\n *\n * @param inputSection - Content to store in the input section key location.\n *\n * @returns {@link @formkit/core#FormKitExtendableSchemaRoot | FormKitExtendableSchemaRoot}\n *\n * @public\n */\nfunction useSchema(inputSection) {\n  return outer(wrapper(label('$label'), inner(prefix(), inputSection(), suffix())), help('$help'), messages(message('$message.value')));\n}\nfunction createSection(section, el, root = false) {\n  return (...children) => {\n    const extendable = extensions => {\n      const node = !el || typeof el === 'string' ? {\n        $el: el\n      } : el();\n      if (isDOM(node) || isComponent(node)) {\n        if (!node.meta) {\n          node.meta = {\n            section\n          };\n        }\n        if (children.length && !node.children) {\n          node.children = [...children.map(child => typeof child === 'string' ? child : child(extensions))];\n        }\n        if (isDOM(node)) {\n          node.attrs = {\n            class: `$classes.${section}`,\n            ...(node.attrs || {})\n          };\n        }\n      }\n      return {\n        if: `$slots.${section}`,\n        then: `$slots.${section}`,\n        else: section in extensions ? extendSchema(node, extensions[section]) : node\n      };\n    };\n    extendable._s = section;\n    return root ? createRoot(extendable) : extendable;\n  };\n}\n/**\n * Returns an extendable schema root node.\n *\n * @param rootSection - Creates the root node.\n *\n * @returns {@link @formkit/core#FormKitExtendableSchemaRoot | FormKitExtendableSchemaRoot}\n *\n * @internal\n */\nfunction createRoot(rootSection) {\n  return extensions => {\n    return [rootSection(extensions)];\n  };\n}\n/**\n * Applies attributes to a given schema section by applying a higher order\n * function that merges a given set of attributes into the node.\n *\n * @param attrs - Attributes to apply to a {@link FormKitSchemaExtendableSection\n * | FormKitSchemaExtendableSection}.\n * @param section - A section to apply attributes to.\n *\n * @returns {@link FormKitSchemaExtendableSection | FormKitSchemaExtendableSection}\n *\n * @public\n */\nfunction $attrs(attrs, section) {\n  const extendable = extensions => {\n    const node = section(extensions);\n    const attributes = typeof attrs === 'function' ? attrs() : attrs;\n    if (!isObject(attributes)) return node;\n    if (isSlotCondition(node) && isDOM(node.else)) {\n      node.else.attrs = {\n        ...node.else.attrs,\n        ...attributes\n      };\n    } else if (isDOM(node)) {\n      node.attrs = {\n        ...node.attrs,\n        ...attributes\n      };\n    }\n    return node;\n  };\n  extendable._s = section._s;\n  return extendable;\n}\n/**\n * Applies a condition to a given schema section.\n *\n * @param condition - A schema condition to apply to a section.\n * @param then - The section that applies if the condition is true.\n * @param otherwise - (else) The section that applies if the condition is false.\n *\n * @returns {@link FormKitSchemaExtendableSection | FormKitSchemaExtendableSection}\n *\n * @public\n */\nfunction $if(condition, then, otherwise) {\n  const extendable = extensions => {\n    const node = then(extensions);\n    if (otherwise || isSchemaObject(node) && 'if' in node || isSlotCondition(node)) {\n      const conditionalNode = {\n        if: condition,\n        then: node\n      };\n      if (otherwise) {\n        conditionalNode.else = otherwise(extensions);\n      }\n      return conditionalNode;\n    } else if (isSlotCondition(node)) {\n      Object.assign(node.else, {\n        if: condition\n      });\n    } else if (isSchemaObject(node)) {\n      Object.assign(node, {\n        if: condition\n      });\n    }\n    return node;\n  };\n  extendable._s = token();\n  return extendable;\n}\n/**\n * Applies a condition to a given schema section.\n *\n * @param varName - The name of the variable that holds the current instance.\n * @param inName - The variable we are iterating over.\n * @param section - A section to repeat.\n *\n * @returns {@link FormKitSchemaExtendableSection | FormKitSchemaExtendableSection}\n *\n * @public\n */\nfunction $for(varName, inName, section) {\n  return extensions => {\n    const node = section(extensions);\n    if (isSlotCondition(node)) {\n      Object.assign(node.else, {\n        for: [varName, inName]\n      });\n    } else if (isSchemaObject(node)) {\n      Object.assign(node, {\n        for: [varName, inName]\n      });\n    }\n    return node;\n  };\n}\n/**\n * Extends a schema node with a given set of extensions.\n *\n * @param section - A section to apply an extension to.\n * @param extendWith - A partial schema snippet to apply to the section.\n *\n * @returns {@link FormKitSchemaExtendableSection | FormKitSchemaExtendableSection}\n *\n * @public\n */\nfunction $extend(section, extendWith) {\n  const extendable = extensions => {\n    const node = section({});\n    if (isSlotCondition(node)) {\n      if (Array.isArray(node.else)) return node;\n      node.else = extendSchema(extendSchema(node.else, extendWith), section._s ? extensions[section._s] : {});\n      return node;\n    }\n    return extendSchema(extendSchema(node, extendWith), section._s ? extensions[section._s] : {});\n  };\n  extendable._s = section._s;\n  return extendable;\n}\n/**\n * Creates a root schema section.\n *\n * @param section - A section to make a root from.\n *\n * @returns {@link FormKitSchemaExtendableSection | FormKitSchemaExtendableSection}\n *\n * @public\n */\nfunction $root(section) {\n  return createRoot(section);\n}\n\n/**\n * Input definition for a button.\n * @public\n */\nconst button = {\n  /**\n   * The actual schema of the input, or a function that returns the schema.\n   */\n  schema: outer(messages(message('$message.value')), wrapper(buttonInput(icon('prefix'), prefix(), buttonLabel('$label || $ui.submit.value'), suffix(), icon('suffix'))), help('$help')),\n  /**\n   * The type of node, can be a list, group, or input.\n   */\n  type: 'input',\n  /**\n   * The family of inputs this one belongs too. For example \"text\" and \"email\"\n   * are both part of the \"text\" family. This is primary used for styling.\n   */\n  family: 'button',\n  /**\n   * An array of extra props to accept for this input.\n   */\n  props: [],\n  /**\n   * Additional features that should be added to your input\n   */\n  features: [localize('submit'), ignore]\n};\n\n/**\n * Input definition for a checkbox(ess).\n * @public\n */\nconst checkbox = {\n  /**\n   * The actual schema of the input, or a function that returns the schema.\n   */\n  schema: outer($if('$options == undefined',\n  /**\n   * Single checkbox structure.\n   */\n  boxWrapper(inner(prefix(), box(), decorator(icon('decorator')), suffix()), $extend(boxLabel('$label'), {\n    if: '$label'\n  })),\n  /**\n   * Multi checkbox structure.\n   */\n  fieldset(legend('$label'), help('$help'), boxOptions(boxOption(boxWrapper(inner(prefix(), $extend(box(), {\n    bind: '$option.attrs',\n    attrs: {\n      id: '$option.attrs.id',\n      value: '$option.value',\n      checked: '$fns.isChecked($option.value)'\n    }\n  }), decorator(icon('decorator')), suffix()), $extend(boxLabel('$option.label'), {\n    if: '$option.label'\n  })), boxHelp('$option.help'))))),\n  // Help text only goes under the input when it is a single.\n  $if('$options == undefined && $help', help('$help')), messages(message('$message.value'))),\n  /**\n   * The type of node, can be a list, group, or input.\n   */\n  type: 'input',\n  /**\n   * The family of inputs this one belongs too. For example \"text\" and \"email\"\n   * are both part of the \"text\" family. This is primary used for styling.\n   */\n  family: 'box',\n  /**\n   * An array of extra props to accept for this input.\n   */\n  props: ['options', 'onValue', 'offValue', 'optionsLoader'],\n  /**\n   * Additional features that should be added to your input\n   */\n  features: [options, checkboxes, defaultIcon('decorator', 'checkboxDecorator')]\n};\n\n/**\n * Input definition for a file input.\n * @public\n */\nconst file = {\n  /**\n   * The actual schema of the input, or a function that returns the schema.\n   */\n  schema: outer(wrapper(label('$label'), inner(icon('prefix', 'label'), prefix(), fileInput(), fileList(fileItem(icon('fileItem'), fileName('$file.name'), $if('$value.length === 1', fileRemove(icon('fileRemove'), '$ui.remove.value')))), $if('$value.length > 1', fileRemove('$ui.removeAll.value')), noFiles(icon('noFiles'), '$ui.noFiles.value'), suffix(), icon('suffix'))), help('$help'), messages(message('$message.value'))),\n  /**\n   * The type of node, can be a list, group, or input.\n   */\n  type: 'input',\n  /**\n   * The family of inputs this one belongs too. For example \"text\" and \"email\"\n   * are both part of the \"text\" family. This is primary used for styling.\n   */\n  family: 'text',\n  /**\n   * An array of extra props to accept for this input.\n   */\n  props: [],\n  /**\n   * Additional features that should be added to your input\n   */\n  features: [files, defaultIcon('fileItem', 'fileItem'), defaultIcon('fileRemove', 'fileRemove'), defaultIcon('noFiles', 'noFiles')]\n};\n\n/**\n * Input definition for a form.\n * @public\n */\nconst form = {\n  /**\n   * The actual schema of the input, or a function that returns the schema.\n   */\n  schema: formInput('$slots.default', messages(message('$message.value')), actions(submitInput())),\n  /**\n   * The type of node, can be a list, group, or input.\n   */\n  type: 'group',\n  /**\n   * An array of extra props to accept for this input.\n   */\n  props: ['actions', 'submit', 'submitLabel', 'submitAttrs', 'submitBehavior', 'incompleteMessage'],\n  /**\n   * Additional features that should be added to your input\n   */\n  features: [form$1, disables]\n};\n\n/**\n * Input definition for a group.\n * @public\n */\nconst group = {\n  /**\n   * The actual schema of the input, or a function that returns the schema.\n   */\n  schema: fragment('$slots.default'),\n  /**\n   * The type of node, can be a list, group, or input.\n   */\n  type: 'group',\n  /**\n   * An array of extra props to accept for this input.\n   */\n  props: [],\n  /**\n   * Additional features that should be added to your input\n   */\n  features: [disables]\n};\n\n/**\n * Input definition for a hidden input.\n * @public\n */\nconst hidden = {\n  /**\n   * The actual schema of the input, or a function that returns the schema.\n   */\n  schema: $root(textInput()),\n  /**\n   * The type of node, can be a list, group, or input.\n   */\n  type: 'input',\n  /**\n   * An array of extra props to accept for this input.\n   */\n  props: [],\n  /**\n   * Additional features that should be added to your input\n   */\n  features: []\n};\n\n/**\n * Input definition for a list.\n * @public\n */\nconst list = {\n  /**\n   * The actual schema of the input, or a function that returns the schema.\n   */\n  schema: fragment('$slots.default'),\n  /**\n   * The type of node, can be a list, group, or input.\n   */\n  type: 'list',\n  /**\n   * An array of extra props to accept for this input.\n   */\n  props: [],\n  /**\n   * Additional features that should be added to your input\n   */\n  features: [disables]\n};\n\n/**\n * Input definition for a radio.\n * @public\n */\nconst radio = {\n  /**\n   * The actual schema of the input, or a function that returns the schema.\n   */\n  schema: outer($if('$options == undefined',\n  /**\n   * Single radio structure.\n   */\n  boxWrapper(inner(prefix(), box(), decorator(icon('decorator')), suffix()), $if('$label', boxLabel('$label'))),\n  /**\n   * Multi radio structure.\n   */\n  fieldset(legend('$label'), help('$help'), boxOptions(boxOption(boxWrapper(inner(prefix(), $extend(box(), {\n    bind: '$option.attrs',\n    attrs: {\n      id: '$option.attrs.id',\n      value: '$option.value',\n      checked: '$fns.isChecked($option.value)'\n    }\n  }), decorator(icon('decorator')), suffix()), $if('$option.label', boxLabel('$option.label'))), boxHelp('$option.help'))))),\n  // Help text only goes under the input when it is a single.\n  $if('$options === undefined && $help', help('$help')), messages(message('$message.value'))),\n  /**\n   * The type of node, can be a list, group, or input.\n   */\n  type: 'input',\n  /**\n   * The family of inputs this one belongs too. For example \"text\" and \"email\"\n   * are both part of the \"text\" family. This is primary used for styling.\n   */\n  family: 'box',\n  /**\n   * An array of extra props to accept for this input.\n   */\n  props: ['options', 'onValue', 'offValue', 'optionsLoader'],\n  /**\n   * Additional features that should be added to your input\n   */\n  features: [disables, options, radios, defaultIcon('decorator', 'radioDecorator')]\n};\n\n/**\n * Input definition for a select.\n * @public\n */\nconst select = {\n  /**\n   * The actual schema of the input, or a function that returns the schema.\n   */\n  schema: outer(wrapper(label('$label'), inner(icon('prefix'), prefix(), selectInput$1($if('$slots.default', () => '$slots.default', $if('$slots.option', optionSlot, option('$option.label')))), $if('$attrs.multiple !== undefined', () => '', icon('select')), suffix(), icon('suffix'))), help('$help'), messages(message('$message.value'))),\n  /**\n   * The type of node, can be a list, group, or input.\n   */\n  type: 'input',\n  /**\n   * An array of extra props to accept for this input.\n   */\n  props: ['options', 'placeholder', 'optionsLoader'],\n  /**\n   * Additional features that should be added to your input\n   */\n  features: [options, select$1, defaultIcon('select', 'select')]\n};\n\n/**\n * Input definition for a textarea.\n * @public\n */\nconst textarea = {\n  /**\n   * The actual schema of the input, or a function that returns the schema.\n   */\n  schema: outer(wrapper(label('$label'), inner(icon('prefix', 'label'), prefix(), textareaInput(), suffix(), icon('suffix'))), help('$help'), messages(message('$message.value'))),\n  /**\n   * The type of node, can be a list, group, or input.\n   */\n  type: 'input',\n  /**\n   * An array of extra props to accept for this input.\n   */\n  props: [],\n  /**\n   * Additional features that should be added to your input\n   */\n  features: [initialValue]\n};\n\n/**\n * Input definition for a text.\n * @public\n */\nconst text = {\n  /**\n   * The actual schema of the input, or a function that returns the schema.\n   */\n  schema: outer(wrapper(label('$label'), inner(icon('prefix', 'label'), prefix(), textInput(), suffix(), icon('suffix'))), help('$help'), messages(message('$message.value'))),\n  /**\n   * The type of node, can be a list, group, or input.\n   */\n  type: 'input',\n  /**\n   * The family of inputs this one belongs too. For example \"text\" and \"email\"\n   * are both part of the \"text\" family. This is primary used for styling.\n   */\n  family: 'text',\n  /**\n   * An array of extra props to accept for this input.\n   */\n  props: [],\n  /**\n   * Additional features that should be added to your input\n   */\n  features: []\n};\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  button: button,\n  submit: button,\n  checkbox: checkbox,\n  file: file,\n  form: form,\n  group: group,\n  hidden: hidden,\n  list: list,\n  radio: radio,\n  select: select,\n  textarea: textarea,\n  text: text,\n  color: text,\n  date: text,\n  datetimeLocal: text,\n  email: text,\n  month: text,\n  number: text,\n  password: text,\n  search: text,\n  tel: text,\n  time: text,\n  url: text,\n  week: text,\n  range: text\n});\nexport { $attrs, $extend, $for, $if, $root, actions, box, boxHelp, boxLabel, boxOption, boxOptions, boxWrapper, button, buttonInput, buttonLabel, checkbox, checkboxes, text as color, composable, createLibraryPlugin, createSection, text as date, text as datetimeLocal, decorator, defaultIcon, disables as disablesChildren, text as email, extendSchema, fieldset, file, fileInput, fileItem, fileList, fileName, fileRemove, files, findSection, form, formInput, form$1 as forms, fragment, group, help, hidden, icon, ignore as ignores, initialValue, inner, index as inputs, isSchemaObject, isSlotCondition, label, legend, list, localize, message, messages, text as month, noFiles, normalizeBoxes, normalizeOptions, text as number, option, optionSlot, options, outer, text as password, prefix, radio, radios, text as range, text as search, select, selectInput$1 as selectInput, select$1 as selects, button as submit, submitInput, suffix, text as tel, text, textInput, textarea, textareaInput, text as time, text as url, useSchema, text as week, wrapper };","map":{"version":3,"names":["extend","camel","has","isPojo","eq","slugify","undefine","clone","token","isObject","createMessage","warn","isConditional","isComponent","isDOM","createLibraryPlugin","libraries","library","reduce","merged","lib","plugin","node","type","props","define","normalizeOptions","options","i","Array","isArray","map","option","label","String","value","Object","assign","__original","keys","optionValue","shouldSelect","valueA","valueB","undefined","hook","prop","next","optionsLoader","outer","createSection","$el","attrs","key","inner","wrapper","if","for","messages","message","id","prefix","suffix","help","fieldset","then","else","decorator","box","bind","name","disabled","onInput","checked","onBlur","legend","boxOption","boxOptions","boxWrapper","boxHelp","boxLabel","buttonInput","buttonLabel","fileInput","onChange","fileItem","fileList","fileName","class","fileRemove","onClick","noFiles","formInput","onSubmit","actions","submitInput","$cmp","textInput","fragment","selectInput$1","selected","optionSlot","children","textareaInput","icon","sectionKey","el","rawIconProp","charAt","toUpperCase","slice","innerHTML","normalizeBoxes","_a","isCreated","input","on","toggleChecked$1","e","target","HTMLInputElement","length","_value","some","existingValue","filter","onValue","offValue","isChecked$1","_b","context","checkboxes","handlers","toggleChecked","fns","isChecked","disables","payload","config","localize","store","set","meta","i18nArgs","isBrowser","window","removeHover","HTMLElement","hasAttribute","removeAttribute","preventStrayDrop","preventDefault","setAttribute","files","_FormKit_File_Drop","addEventListener","resetFiles","document","getElementById","file","item","push","handleSubmit","submitEvent","settled","setSubmitted","n","visible","walk","onSubmitRaw","ledger","onSubmitInvalid","incompleteMessage","blocking","showAsMessage","retVal","submit","dispatch","Promise","autoDisable","submitBehavior","remove","HTMLFormElement","form$1","isForm","ignore","parent","initialValue","event","radios","isSelected","hasNoNullOption","optionA","deferChange","r","setTimeout","selectInput","from","selectedOptions","o","applyPlaceholder","placeholder","hidden","select$1","_c","isMultiple","multiple","showPlaceholder","hasMatchingValue","defaultIcon","isSchemaObject","schema","isSlotCondition","startsWith","findSection","index","section","found","extendSchema","extension","composable","extendWith","root","isObj","extended","useSchema","inputSection","extendable","extensions","child","_s","createRoot","rootSection","$attrs","attributes","$if","condition","otherwise","conditionalNode","$for","varName","inName","$extend","$root","button","family","features","checkbox","form","group","list","radio","select","textarea","text","freeze","__proto__","color","date","datetimeLocal","email","month","number","password","search","tel","time","url","week","range","disablesChildren","forms","ignores","inputs","selects"],"sources":["D:/VueJS/Form Validation with Formkit/node_modules/@formkit/inputs/dist/index.mjs"],"sourcesContent":["import { extend, camel, has, isPojo, eq, slugify, undefine, clone, token, isObject } from '@formkit/utils';\nimport { createMessage, warn, isConditional, isComponent, isDOM } from '@formkit/core';\n\n/**\n * Creates a plugin based on a list of {@link @formkit/core#FormKitLibrary | FormKitLibrary}.\n *\n * @param libraries - One or many {@link @formkit/core#FormKitLibrary | FormKitLibrary}.\n *\n * @returns {@link @formkit/core#FormKitPlugin | FormKitPlugin}\n *\n * @public\n */\nfunction createLibraryPlugin(...libraries) {\n    /**\n     * Merge all provided library items.\n     */\n    const library = libraries.reduce((merged, lib) => extend(merged, lib), {});\n    /* eslint-disable-next-line @typescript-eslint/no-empty-function */\n    const plugin = () => { };\n    /**\n     * Enables the hook that exposes all library inputs.\n     * @param node - The primary plugin\n     */\n    plugin.library = function (node) {\n        const type = camel(node.props.type);\n        if (has(library, type)) {\n            node.define(library[type]);\n        }\n    };\n    return plugin;\n}\n\n/**\n * A function to normalize an array of objects, array of strings, or object of\n * key-values to use an array of objects with value and label properties.\n *\n * @param options - An un-normalized {@link FormKitOptionsProp | FormKitOptionsProp}.\n *\n * @returns A list of {@link FormKitOptionsList | FormKitOptionsList}.\n *\n * @public\n */\nfunction normalizeOptions(options) {\n    let i = 1;\n    if (Array.isArray(options)) {\n        return options.map((option) => {\n            if (typeof option === 'string' || typeof option === 'number') {\n                return {\n                    label: String(option),\n                    value: String(option),\n                };\n            }\n            if (typeof option == 'object') {\n                if ('value' in option && typeof option.value !== 'string') {\n                    Object.assign(option, {\n                        value: `__mask_${i++}`,\n                        __original: option.value,\n                    });\n                }\n            }\n            return option;\n        });\n    }\n    return Object.keys(options).map((value) => {\n        return {\n            label: options[value],\n            value,\n        };\n    });\n}\n/**\n * Given an {@link FormKitOptionsList | FormKitOptionsList}, find the real value in the options.\n *\n * @param options - The {@link FormKitOptionsList | FormKitOptionsList} to check for a given value\n * @param value - The value to return\n *\n * @returns `unknown`\n *\n * @public\n */\nfunction optionValue(options, value) {\n    if (Array.isArray(options)) {\n        for (const option of options) {\n            if (value == option.value) {\n                return '__original' in option ? option.__original : option.value;\n            }\n        }\n    }\n    return value;\n}\n/**\n * Determines if the value should be selected.\n *\n * @param valueA - Any type of value\n * @param valueB - Any type of value\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction shouldSelect(valueA, valueB) {\n    if ((valueA === null && valueB === undefined) ||\n        (valueA === undefined && valueB === null))\n        return false;\n    if (valueA == valueB)\n        return true;\n    if (isPojo(valueA) && isPojo(valueB))\n        return eq(valueA, valueB);\n    return false;\n}\n/**\n * A feature that converts the options prop to usable values, to be used by a\n * feature or a plugin.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction options(node) {\n    node.hook.prop((prop, next) => {\n        if (prop.prop === 'options') {\n            if (typeof prop.value === 'function') {\n                node.props.optionsLoader = prop.value;\n                prop.value = [];\n            }\n            else {\n                prop.value = normalizeOptions(prop.value);\n            }\n        }\n        return next(prop);\n    });\n}\n\n/**\n * Outer section where most data attributes are assigned.\n *\n * @public\n */\nconst outer = createSection('outer', () => ({\n    $el: 'div',\n    attrs: {\n        key: '$id',\n        'data-family': '$family || undefined',\n        'data-type': '$type',\n        'data-multiple': '$attrs.multiple || ($type != \"select\" && $options != undefined) || undefined',\n        'data-disabled': '$disabled || undefined',\n        'data-complete': '$state.complete || undefined',\n        'data-invalid': '$state.valid === false && $state.validationVisible || undefined',\n        'data-errors': '$state.errors || undefined',\n        'data-submitted': '$state.submitted || undefined',\n        'data-prefix-icon': '$_rawPrefixIcon !== undefined || undefined',\n        'data-suffix-icon': '$_rawSuffixIcon !== undefined || undefined',\n        'data-prefix-icon-click': '$onPrefixIconClick !== undefined || undefined',\n        'data-suffix-icon-click': '$onSuffixIconClick !== undefined || undefined',\n    },\n}), true);\n\n/**\n * Inner section\n *\n * @public\n */\nconst inner = createSection('inner', 'div');\n\n/**\n * Wrapper input section\n *\n * @public\n */\nconst wrapper = createSection('wrapper', 'div');\n\n/**\n * Label section with label element\n *\n * @public\n */\nconst label = createSection('label', () => ({\n    $el: 'label',\n    if: '$label',\n    attrs: {\n        for: '$id',\n    },\n}));\n\n/**\n * Messages section where all messages will be displayed.\n *\n * @public\n */\nconst messages = createSection('messages', () => ({\n    $el: 'ul',\n    if: '$defaultMessagePlacement && $fns.length($messages)',\n}));\n\n/**\n * Message section, shows a group of messages.\n *\n * @public\n */\nconst message = createSection('message', () => ({\n    $el: 'li',\n    for: ['message', '$messages'],\n    attrs: {\n        key: '$message.key',\n        id: `$id + '-' + $message.key`,\n        'data-message-type': '$message.type',\n    },\n}));\n\n/**\n * Prefix section\n *\n * @public\n */\nconst prefix = createSection('prefix', null);\n\n/**\n * Suffix section\n *\n * @public\n */\nconst suffix = createSection('suffix', null);\n\n/**\n * Help section that shows help text\n *\n * @public\n */\nconst help = createSection('help', () => ({\n    $el: 'div',\n    if: '$help',\n    attrs: {\n        id: '$: \"help-\" + $id',\n    },\n}));\n\n/**\n * Fieldset section, used to describe help\n *\n * @public\n */\nconst fieldset = createSection('fieldset', () => ({\n    $el: 'fieldset',\n    attrs: {\n        id: '$id',\n        'aria-describedby': {\n            if: '$help',\n            then: '$: \"help-\" + $id',\n            else: undefined,\n        },\n    },\n}));\n\n/**\n * Decorator section\n *\n * @public\n */\nconst decorator = createSection('decorator', () => ({\n    $el: 'span',\n    attrs: {\n        'aria-hidden': 'true',\n    },\n}));\n\n/**\n * Box section used for grouping options\n *\n * @public\n */\nconst box = createSection('input', () => ({\n    $el: 'input',\n    bind: '$attrs',\n    attrs: {\n        type: '$type',\n        name: '$node.props.altName || $node.name',\n        disabled: '$option.attrs.disabled || $disabled',\n        onInput: '$handlers.toggleChecked',\n        checked: '$fns.eq($_value, $onValue)',\n        onBlur: '$handlers.blur',\n        value: '$: true',\n        id: '$id',\n        'aria-describedby': {\n            if: '$options.length',\n            then: {\n                if: '$option.help',\n                then: '$: \"help-\" + $option.attrs.id',\n                else: undefined,\n            },\n            else: {\n                if: '$help',\n                then: '$: \"help-\" + $id',\n                else: undefined,\n            },\n        },\n    },\n}));\n\n/**\n * Legend section, used instead of label when its grouping fields.\n *\n * @public\n */\nconst legend = createSection('legend', () => ({\n    $el: 'legend',\n    if: '$label',\n}));\n\n/**\n * Option section used to show an option\n *\n * @public\n */\nconst boxOption = createSection('option', () => ({\n    $el: 'li',\n    for: ['option', '$options'],\n    attrs: {\n        'data-disabled': '$option.attrs.disabled || $disabled',\n    },\n}));\n\n/**\n * Options section used to wrap all option sections in a list\n *\n * @public\n */\nconst boxOptions = createSection('options', 'ul');\n\n/**\n * Wrapper section for options\n *\n * @public\n */\nconst boxWrapper = createSection('wrapper', () => ({\n    $el: 'label',\n    attrs: {\n        'data-disabled': {\n            if: '$options.length',\n            then: undefined,\n            else: '$disabled || undefined',\n        },\n        'data-checked': {\n            if: '$options == undefined',\n            then: '$fns.eq($_value, $onValue) || undefined',\n            else: '$fns.isChecked($option.value) || undefined',\n        },\n    },\n}));\n\n/**\n * Option help section\n *\n * @public\n */\nconst boxHelp = createSection('optionHelp', () => ({\n    $el: 'div',\n    if: '$option.help',\n    attrs: {\n        id: '$: \"help-\" + $option.attrs.id',\n    },\n}));\n\n/**\n * Label section for options\n *\n * @public\n */\nconst boxLabel = createSection('label', 'span');\n\n/**\n * Input section for a button\n *\n * @public\n */\nconst buttonInput = createSection('input', () => ({\n    $el: 'button',\n    bind: '$attrs',\n    attrs: {\n        type: '$type',\n        disabled: '$disabled',\n        name: '$node.name',\n        id: '$id',\n    },\n}));\n\n/**\n * Default section for a button\n *\n * @public\n */\nconst buttonLabel = createSection('default', null);\n\n/**\n * Input section for a file input\n *\n * @public\n */\nconst fileInput = createSection('input', () => ({\n    $el: 'input',\n    bind: '$attrs',\n    attrs: {\n        type: 'file',\n        disabled: '$disabled',\n        name: '$node.name',\n        onChange: '$handlers.files',\n        onBlur: '$handlers.blur',\n        id: '$id',\n        'aria-describedby': '$describedBy',\n    },\n}));\n\n/**\n * File item section for showing a file name\n *\n * @public\n */\nconst fileItem = createSection('fileItem', () => ({\n    $el: 'li',\n    for: ['file', '$value'],\n}));\n\n/**\n * File list section to show all file names\n *\n * @public\n */\nconst fileList = createSection('fileList', () => ({\n    $el: 'ul',\n    if: '$value.length',\n    attrs: {\n        'data-has-multiple': {\n            if: '$value.length > 1',\n            then: 'true',\n        },\n    },\n}));\n\n/**\n * File name section to show the file name\n *\n * @public\n */\nconst fileName = createSection('fileName', () => ({\n    $el: 'span',\n    attrs: {\n        class: '$classes.fileName',\n    },\n}));\n\n/**\n * File remove section to show a remove button for files\n *\n * @public\n */\nconst fileRemove = createSection('fileRemove', () => ({\n    $el: 'button',\n    attrs: {\n        onClick: '$handlers.resetFiles',\n    },\n}));\n\n/**\n * No file section that shows when there is no files\n *\n * @public\n */\nconst noFiles = createSection('noFiles', () => ({\n    $el: 'span',\n    if: '$value.length == 0',\n}));\n\n/**\n * Form section\n *\n * @public\n */\nconst formInput = createSection('form', () => ({\n    $el: 'form',\n    bind: '$attrs',\n    attrs: {\n        id: '$id',\n        name: '$node.name',\n        onSubmit: '$handlers.submit',\n        'data-loading': '$state.loading || undefined',\n    },\n}), true);\n\n/**\n * Actions section that shows the action buttons\n *\n * @public\n */\nconst actions = createSection('actions', () => ({\n    $el: 'div',\n    if: '$actions',\n}));\n\n/**\n * Submit section that displays a submit button from a form\n *\n * @public\n */\nconst submitInput = createSection('submit', () => ({\n    $cmp: 'FormKit',\n    bind: '$submitAttrs',\n    props: {\n        type: 'submit',\n        disabled: '$disabled',\n        label: '$submitLabel',\n    },\n}));\n\n/**\n * Input section\n *\n * @public\n */\nconst textInput = createSection('input', () => ({\n    $el: 'input',\n    bind: '$attrs',\n    attrs: {\n        type: '$type',\n        disabled: '$disabled',\n        name: '$node.name',\n        onInput: '$handlers.DOMInput',\n        onBlur: '$handlers.blur',\n        value: '$_value',\n        id: '$id',\n        'aria-describedby': '$describedBy',\n    },\n}));\n\n/**\n * A simple fragment section\n *\n * @public\n */\nconst fragment = createSection('wrapper', null, true);\n\n/**\n * Input section used by selects\n *\n * @public\n */\nconst selectInput$1 = createSection('input', () => ({\n    $el: 'select',\n    bind: '$attrs',\n    attrs: {\n        id: '$id',\n        'data-placeholder': '$fns.showPlaceholder($_value, $placeholder)',\n        disabled: '$disabled',\n        class: '$classes.input',\n        name: '$node.name',\n        onChange: '$handlers.onChange',\n        onInput: '$handlers.selectInput',\n        onBlur: '$handlers.blur',\n        'aria-describedby': '$describedBy',\n    },\n}));\n\n/**\n * Option section used to show options\n *\n * @public\n */\nconst option = createSection('option', () => ({\n    $el: 'option',\n    for: ['option', '$options'],\n    bind: '$option.attrs',\n    attrs: {\n        class: '$classes.option',\n        value: '$option.value',\n        selected: '$fns.isSelected($option)',\n    },\n}));\n\n/**\n * Options slot section that displays options when used with slots\n *\n * @public\n */\nconst optionSlot = () => ({\n    $el: null,\n    if: '$options.length',\n    for: ['option', '$options'],\n    children: '$slots.option',\n});\n\n/**\n * Input section used by textarea inputs\n *\n * @public\n */\nconst textareaInput = createSection('input', () => ({\n    $el: 'textarea',\n    bind: '$attrs',\n    attrs: {\n        disabled: '$disabled',\n        name: '$node.name',\n        onInput: '$handlers.DOMInput',\n        onBlur: '$handlers.blur',\n        value: '$_value',\n        id: '$id',\n        'aria-describedby': '$describedBy',\n    },\n    children: '$initialValue',\n}));\n\n/**\n * Icon section used by all icons\n *\n * @public\n */\nconst icon = (sectionKey, el) => {\n    return createSection(`${sectionKey}Icon`, () => {\n        const rawIconProp = `_raw${sectionKey\n            .charAt(0)\n            .toUpperCase()}${sectionKey.slice(1)}Icon`;\n        return {\n            if: `$${sectionKey}Icon && $${rawIconProp}`,\n            $el: `${el ? el : 'span'}`,\n            attrs: {\n                class: `$classes.${sectionKey}Icon + \" formkit-icon\"`,\n                innerHTML: `$${rawIconProp}`,\n                onClick: `$handlers.iconClick(${sectionKey})`,\n                for: {\n                    if: `${el === 'label'}`,\n                    then: '$id',\n                },\n            },\n        };\n    })();\n};\n\n/**\n * A feature that normalizes box types (checkboxes, radios).\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @returns A {@link @formkit/node#FormKitMiddleware | FormKitMiddleware}.\n *\n * @public\n */\nfunction normalizeBoxes(node) {\n    return function (prop, next) {\n        if (prop.prop === 'options' && Array.isArray(prop.value)) {\n            prop.value = prop.value.map((option) => {\n                var _a;\n                if (!((_a = option.attrs) === null || _a === void 0 ? void 0 : _a.id)) {\n                    return extend(option, {\n                        attrs: {\n                            id: `${node.name}-option-${slugify(String(option.value))}`,\n                        },\n                    });\n                }\n                return option;\n            });\n            if (node.props.type === 'checkbox' && !Array.isArray(node.value)) {\n                if (node.isCreated) {\n                    node.input([], false);\n                }\n                else {\n                    node.on('created', () => {\n                        if (!Array.isArray(node.value)) {\n                            node.input([], false);\n                        }\n                    });\n                }\n            }\n        }\n        return next(prop);\n    };\n}\n\n/**\n * Event handler when an input is toggled.\n *\n * @param node - The {@link @formkit/node#FormKitNode | FormKitNode} being toggled.\n * @param e - The input event related to the toggling.\n *\n * @public\n */\nfunction toggleChecked$1(node, e) {\n    const el = e.target;\n    if (el instanceof HTMLInputElement) {\n        const value = Array.isArray(node.props.options)\n            ? optionValue(node.props.options, el.value)\n            : el.value;\n        if (Array.isArray(node.props.options) && node.props.options.length) {\n            if (!Array.isArray(node._value)) {\n                // There is no array value set\n                node.input([value]);\n            }\n            else if (!node._value.some((existingValue) => shouldSelect(value, existingValue))) {\n                // The value is not in the current set\n                node.input([...node._value, value]);\n            }\n            else {\n                // Filter out equivalent values\n                node.input(node._value.filter((existingValue) => !shouldSelect(value, existingValue)));\n            }\n        }\n        else {\n            if (el.checked) {\n                node.input(node.props.onValue);\n            }\n            else {\n                node.input(node.props.offValue);\n            }\n        }\n    }\n}\n/**\n * Checks if a given option is present in the node value.\n *\n * @param node - The The {@link @formkit/node#FormKitNode | FormKitNode} being checked.\n * @param value - The value of any option.\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction isChecked$1(node, value) {\n    var _a, _b;\n    // We need to force vue’s reactivity to respond when the value is run:\n    (_a = node.context) === null || _a === void 0 ? void 0 : _a.value;\n    (_b = node.context) === null || _b === void 0 ? void 0 : _b._value;\n    if (Array.isArray(node._value)) {\n        return node._value.some((existingValue) => shouldSelect(optionValue(node.props.options, value), existingValue));\n    }\n    return false;\n}\n/**\n * A feature that adds checkbox selection support.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction checkboxes(node) {\n    node.on('created', () => {\n        var _a, _b;\n        if ((_a = node.context) === null || _a === void 0 ? void 0 : _a.handlers) {\n            node.context.handlers.toggleChecked = toggleChecked$1.bind(null, node);\n        }\n        if ((_b = node.context) === null || _b === void 0 ? void 0 : _b.fns) {\n            node.context.fns.isChecked = isChecked$1.bind(null, node);\n        }\n        // Configure our default onValue and offValue\n        if (!has(node.props, 'onValue'))\n            node.props.onValue = true;\n        if (!has(node.props, 'offValue'))\n            node.props.offValue = false;\n    });\n    node.hook.prop(normalizeBoxes(node));\n}\n\n/**\n * A feature that allows disabling children of this node.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction disables(node) {\n    node.on('created', () => {\n        node.props.disabled = undefine(node.props.disabled);\n    });\n    node.hook.prop(({ prop, value }, next) => {\n        value = prop === 'disabled' ? undefine(value) : value;\n        return next({ prop, value });\n    });\n    node.on('prop:disabled', ({ payload: value }) => {\n        node.config.disabled = undefine(value);\n    });\n    node.on('created', () => {\n        node.config.disabled = undefine(node.props.disabled);\n    });\n}\n\n/**\n * Creates a new feature that generates a localization message of type ui\n * for use on a given component.\n *\n * @param key - The key of the message.\n * @param value - The value of the message.\n *\n * @returns A {@link @formkit/core#FormKitPlugin | FormKitPlugin}.\n *\n * @public\n */\nfunction localize(key, value) {\n    return (node) => {\n        node.store.set(createMessage({\n            key,\n            type: 'ui',\n            value: value || key,\n            meta: {\n                localize: true,\n                i18nArgs: [node],\n            },\n        }));\n    };\n}\n\nconst isBrowser = typeof window !== 'undefined';\n/**\n * Remove the data-file-hover attribute from the target.\n *\n * @param e - Event\n *\n * @internal\n */\nfunction removeHover(e) {\n    if (e.target instanceof HTMLElement &&\n        e.target.hasAttribute('data-file-hover')) {\n        e.target.removeAttribute('data-file-hover');\n    }\n}\n/**\n * Prevent stray drag/drop events from navigating the window.\n *\n * @param e - Event\n *\n * @internal\n */\nfunction preventStrayDrop(type, e) {\n    if (!(e.target instanceof HTMLInputElement)) {\n        e.preventDefault();\n    }\n    else if (type === 'dragover') {\n        e.target.setAttribute('data-file-hover', 'true');\n    }\n    if (type === 'drop') {\n        removeHover(e);\n    }\n}\n/**\n * A feature to add file handling support to an input.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction files(node) {\n    // Localize our content:\n    localize('noFiles', 'Select file')(node);\n    localize('removeAll', 'Remove all')(node);\n    localize('remove')(node);\n    if (isBrowser) {\n        if (!window._FormKit_File_Drop) {\n            window.addEventListener('dragover', preventStrayDrop.bind(null, 'dragover'));\n            window.addEventListener('drop', preventStrayDrop.bind(null, 'drop'));\n            window.addEventListener('dragleave', removeHover);\n            window._FormKit_File_Drop = true;\n        }\n    }\n    node.hook.input((value, next) => next(Array.isArray(value) ? value : []));\n    node.on('created', () => {\n        if (!Array.isArray(node.value))\n            node.input([], false);\n        if (!node.context)\n            return;\n        node.context.handlers.resetFiles = (e) => {\n            e.preventDefault();\n            node.input([]);\n            if (node.props.id && isBrowser) {\n                const el = document.getElementById(node.props.id);\n                if (el)\n                    el.value = '';\n            }\n        };\n        node.context.handlers.files = (e) => {\n            var _a, _b;\n            const files = [];\n            if (e.target instanceof HTMLInputElement && e.target.files) {\n                for (let i = 0; i < e.target.files.length; i++) {\n                    let file;\n                    if ((file = e.target.files.item(i))) {\n                        files.push({ name: file.name, file });\n                    }\n                }\n                node.input(files);\n            }\n            if (node.context)\n                node.context.files = files;\n            // Call the original listener if there is one.\n            if (typeof ((_a = node.props.attrs) === null || _a === void 0 ? void 0 : _a.onChange) === 'function') {\n                (_b = node.props.attrs) === null || _b === void 0 ? void 0 : _b.onChange(e);\n            }\n        };\n    });\n}\n\n/**\n * Handle the submit event.\n *\n * @param e - The event\n *\n * @internal\n */\nasync function handleSubmit(node, submitEvent) {\n    submitEvent.preventDefault();\n    await node.settled;\n    // Set the submitted state on all children\n    const setSubmitted = (n) => n.store.set(createMessage({\n        key: 'submitted',\n        value: true,\n        visible: false,\n    }));\n    node.walk(setSubmitted);\n    setSubmitted(node);\n    if (typeof node.props.onSubmitRaw === 'function') {\n        node.props.onSubmitRaw(submitEvent, node);\n    }\n    if (node.ledger.value('blocking')) {\n        if (typeof node.props.onSubmitInvalid === 'function') {\n            node.props.onSubmitInvalid(node);\n        }\n        // There is still a blocking message in the store.\n        if (node.props.incompleteMessage !== false) {\n            node.store.set(createMessage({\n                blocking: false,\n                key: `incomplete`,\n                meta: {\n                    localize: node.props.incompleteMessage === undefined,\n                    i18nArgs: [{ node }],\n                    showAsMessage: true,\n                },\n                type: 'ui',\n                value: node.props.incompleteMessage || 'Form incomplete.',\n            }));\n        }\n    }\n    else {\n        // No blocking messages\n        if (typeof node.props.onSubmit === 'function') {\n            // call onSubmit\n            const retVal = node.props.onSubmit(node.hook.submit.dispatch(clone(node.value)), node);\n            if (retVal instanceof Promise) {\n                const autoDisable = node.props.disabled === undefined &&\n                    node.props.submitBehavior !== 'live';\n                if (autoDisable)\n                    node.props.disabled = true;\n                node.store.set(createMessage({\n                    key: 'loading',\n                    value: true,\n                    visible: false,\n                }));\n                await retVal;\n                if (autoDisable)\n                    node.props.disabled = false;\n                node.store.remove('loading');\n            }\n        }\n        else {\n            if (submitEvent.target instanceof HTMLFormElement) {\n                submitEvent.target.submit();\n            }\n        }\n    }\n}\n/**\n * A feature to add a submit handler and actions section.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction form$1(node) {\n    node.props.isForm = true;\n    node.on('created', () => {\n        var _a;\n        if ((_a = node.context) === null || _a === void 0 ? void 0 : _a.handlers) {\n            node.context.handlers.submit = handleSubmit.bind(null, node);\n        }\n        if (!has(node.props, 'actions')) {\n            node.props.actions = true;\n        }\n    });\n    node.on('settled:blocking', () => node.store.remove('incomplete'));\n}\n\n/**\n * A feature that applies `ignore=\"true\"` by default.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction ignore(node) {\n    if (node.props.ignore === undefined) {\n        node.props.ignore = true;\n        node.parent = null;\n    }\n}\n\n/**\n * A feature that ensures the input has an `initialValue` prop.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction initialValue(node) {\n    node.on('created', () => {\n        if (node.context) {\n            node.context.initialValue = node.value || '';\n        }\n    });\n}\n\n/**\n * Sets the value of a radio button when checked.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n * @param event - Event\n *\n * @public\n */\nfunction toggleChecked(node, event) {\n    if (event.target instanceof HTMLInputElement) {\n        node.input(optionValue(node.props.options, event.target.value));\n    }\n}\n/**\n * Checks if the value being checked is the current value.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n * @param value - The value to check\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction isChecked(node, value) {\n    var _a, _b;\n    // We need to force vue’s reactivity to respond when the value is run:\n    (_a = node.context) === null || _a === void 0 ? void 0 : _a.value;\n    (_b = node.context) === null || _b === void 0 ? void 0 : _b._value;\n    return shouldSelect(optionValue(node.props.options, value), node._value);\n}\n/**\n * A feature to check if the value being checked is the current value.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction radios(node) {\n    node.on('created', () => {\n        var _a, _b;\n        if (!Array.isArray(node.props.options)) {\n            warn(350, node);\n        }\n        if ((_a = node.context) === null || _a === void 0 ? void 0 : _a.handlers) {\n            node.context.handlers.toggleChecked = toggleChecked.bind(null, node);\n        }\n        if ((_b = node.context) === null || _b === void 0 ? void 0 : _b.fns) {\n            node.context.fns.isChecked = isChecked.bind(null, node);\n        }\n    });\n    node.hook.prop(normalizeBoxes(node));\n}\n\n/**\n * Checks if a the given option should have the selected attribute.\n * @param node - The node being evaluated.\n * @param option - The option value to check\n * @returns\n * @public\n */\nfunction isSelected(node, option) {\n    // Here we trick reactivity (if at play) to watch this function.\n    node.context && node.context.value;\n    const optionValue = '__original' in option ? option.__original : option.value;\n    function hasNoNullOption() {\n        return !node.props.options.some((option) => ('__original' in option ? option.__original : option.value) === null);\n    }\n    return Array.isArray(node._value)\n        ? node._value.some((optionA) => shouldSelect(optionA, optionValue))\n        : (node._value === undefined ||\n            (node._value === null && hasNoNullOption())) &&\n            option.attrs &&\n            option.attrs['data-is-placeholder']\n            ? true\n            : shouldSelect(optionValue, node._value);\n}\n/**\n * Defers the change event till after the next cycle.\n * @param node - The node being evaluated.\n * @param e - The change event.\n */\nasync function deferChange(node, e) {\n    var _a;\n    if (typeof ((_a = node.props.attrs) === null || _a === void 0 ? void 0 : _a.onChange) === 'function') {\n        await new Promise((r) => setTimeout(r, 0));\n        await node.settled;\n        node.props.attrs.onChange(e);\n    }\n}\n/**\n * Select the correct values.\n * @param e - The input event emitted by the select.\n */\nfunction selectInput(node, e) {\n    const target = e.target;\n    const value = target.hasAttribute('multiple')\n        ? Array.from(target.selectedOptions).map((o) => optionValue(node.props.options, o.value))\n        : optionValue(node.props.options, target.value);\n    node.input(value);\n}\n/**\n * Appends a placeholder to the options list.\n * @param options - An options list\n * @param placeholder - A placeholder string to append\n * @returns\n */\nfunction applyPlaceholder(options, placeholder) {\n    if (!options.some((option) => option.attrs && option.attrs['data-is-placeholder'])) {\n        return [\n            {\n                label: placeholder,\n                value: '',\n                attrs: {\n                    hidden: true,\n                    disabled: true,\n                    'data-is-placeholder': 'true',\n                },\n            },\n            ...options,\n        ];\n    }\n    return options;\n}\n/**\n * Converts the options prop to usable values.\n * @param node - A formkit node.\n * @public\n */\nfunction select$1(node) {\n    // Set the initial value of a multi-input\n    node.on('created', () => {\n        var _a, _b, _c;\n        const isMultiple = undefine((_a = node.props.attrs) === null || _a === void 0 ? void 0 : _a.multiple);\n        if (!isMultiple &&\n            node.props.placeholder &&\n            Array.isArray(node.props.options)) {\n            node.hook.prop(({ prop, value }, next) => {\n                if (prop === 'options') {\n                    value = applyPlaceholder(value, node.props.placeholder);\n                }\n                return next({ prop, value });\n            });\n            node.props.options = applyPlaceholder(node.props.options, node.props.placeholder);\n        }\n        if (isMultiple) {\n            if (node.value === undefined) {\n                node.input([], false);\n            }\n        }\n        else if (node.context && !node.context.options) {\n            // If this input is (probably) using the default slot, we need to add a\n            // \"value\" attribute to get bound\n            node.props.attrs = Object.assign({}, node.props.attrs, {\n                value: node._value,\n            });\n            node.on('input', ({ payload }) => {\n                node.props.attrs = Object.assign({}, node.props.attrs, {\n                    value: payload,\n                });\n            });\n        }\n        if ((_b = node.context) === null || _b === void 0 ? void 0 : _b.handlers) {\n            node.context.handlers.selectInput = selectInput.bind(null, node);\n            node.context.handlers.onChange = deferChange.bind(null, node);\n        }\n        if ((_c = node.context) === null || _c === void 0 ? void 0 : _c.fns) {\n            node.context.fns.isSelected = isSelected.bind(null, node);\n            node.context.fns.showPlaceholder = (value, placeholder) => {\n                if (!Array.isArray(node.props.options))\n                    return false;\n                const hasMatchingValue = node.props.options.some((option) => {\n                    if (option.attrs && 'data-is-placeholder' in option.attrs)\n                        return false;\n                    const optionValue = '__original' in option ? option.__original : option.value;\n                    return eq(value, optionValue);\n                });\n                return placeholder && !hasMatchingValue ? true : undefined;\n            };\n        }\n    });\n    node.hook.input((value, next) => {\n        var _a, _b, _c;\n        if (!node.props.placeholder &&\n            value === undefined &&\n            Array.isArray((_a = node.props) === null || _a === void 0 ? void 0 : _a.options) &&\n            node.props.options.length &&\n            !undefine((_c = (_b = node.props) === null || _b === void 0 ? void 0 : _b.attrs) === null || _c === void 0 ? void 0 : _c.multiple)) {\n            value =\n                '__original' in node.props.options[0]\n                    ? node.props.options[0].__original\n                    : node.props.options[0].value;\n        }\n        return next(value);\n    });\n}\n\n/**\n * Adds icon props definition.\n *\n * @param sectionKey - the location the icon should be loaded.\n * @param defaultIcon - the icon that should be loaded if a match is found in the user's CSS.\n *\n * @returns A {@link @formkit/core#FormKitPlugin | FormKitPlugin}.\n *\n * @public\n */\nfunction defaultIcon(sectionKey, defaultIcon) {\n    return (node) => {\n        if (node.props[`${sectionKey}Icon`] === undefined) {\n            node.props[`${sectionKey}Icon`] = `default:${defaultIcon}`;\n        }\n    };\n}\n\n/**\n * Type guard for schema objects.\n *\n * @param schema - returns `true` if the node is a schema node but not a string\n * or conditional.\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction isSchemaObject(schema) {\n    return (typeof schema === 'object' &&\n        ('$el' in schema || '$cmp' in schema || '$formkit' in schema));\n}\n/**\n * Checks if the current schema node is a slot condition.\n *\n * @example\n *\n * ```js\n * {\n *  if: '$slot.name',\n *  then: '$slot.name',\n *  else: []\n * } // this schema node would return true.\n * ```\n *\n * @param node - A {@link @formkit/core#FormKitSchemaNode | FormKitSchemaNode}.\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction isSlotCondition(node) {\n    if (isConditional(node) &&\n        node.if &&\n        node.if.startsWith('$slots.') &&\n        typeof node.then === 'string' &&\n        node.then.startsWith('$slots.') &&\n        'else' in node) {\n        return true;\n    }\n    return false;\n}\n/**\n * Finds a seciton by name in a schema.\n *\n * @param schema - A {@link @formkit/core#FormKitSchemaNode | FormKitSchemaNode} array.\n * @param target - The name of the section to find.\n *\n * @returns a tuple of the schema and the section or a tuple of `false` and `false` if not found.\n *\n * @public\n */\nfunction findSection(schema, target) {\n    var _a;\n    for (let index = 0; index < schema.length; index++) {\n        const section = schema[index];\n        if (isSlotCondition(section)) {\n            if (isComponent(section.else) || isDOM(section.else)) {\n                if (((_a = section.else.meta) === null || _a === void 0 ? void 0 : _a.section) === target) {\n                    return [schema, section];\n                }\n                else if (section.else.children &&\n                    Array.isArray(section.else.children) &&\n                    section.else.children.length) {\n                    const found = findSection(section.else.children, target);\n                    if (found[0]) {\n                        return found;\n                    }\n                }\n            }\n        }\n    }\n    return [false, false];\n}\n/**\n * Extends a single schema node with an extension. The extension can be any\n * partial node including strings.\n *\n * @param schema - The base schema node.\n * @param extension - The values to extend on the base schema node.\n *\n * @returns {@link @formkit/core#FormKitSchemaNode | FormKitSchemaNode}\n *\n * @public\n */\nfunction extendSchema(schema, extension = {}) {\n    if (typeof schema === 'string') {\n        return isSchemaObject(extension) || typeof extension === 'string'\n            ? extension\n            : schema;\n    }\n    else if (Array.isArray(schema)) {\n        return isSchemaObject(extension) ? extension : schema;\n    }\n    return extend(schema, extension);\n}\n/**\n * @deprecated This function is deprecated. Use `createSection` instead!\n *\n * @param key - A new section key name.\n * @param schema - The default schema in this composable slot.\n *\n * @returns {@link @formkit/core#FormKitSchemaComposable | FormKitSchemaComposable}\n *\n * @public\n */\nfunction composable(key, schema) {\n    warn(800, 'composable function');\n    return (extendWith = {}, children = undefined) => {\n        const root = typeof schema === 'function'\n            ? schema(children)\n            : typeof schema === 'object'\n                ? clone(schema)\n                : schema;\n        const isObj = isSchemaObject(root);\n        if (isObj && !('children' in root) && children) {\n            if (Array.isArray(children)) {\n                if (children.length) {\n                    root.children = children;\n                }\n            }\n            else {\n                root.children = [children];\n            }\n        }\n        const extended = extendSchema(root, extendWith);\n        return {\n            if: `$slots.${key}`,\n            then: `$slots.${key}`,\n            else: Array.isArray(extended) ? extended : [extended],\n        };\n    };\n}\n/**\n * Creates an input schema with all of the wrapping base schema.\n *\n * @param inputSection - Content to store in the input section key location.\n *\n * @returns {@link @formkit/core#FormKitExtendableSchemaRoot | FormKitExtendableSchemaRoot}\n *\n * @public\n */\nfunction useSchema(inputSection) {\n    return outer(wrapper(label('$label'), inner(prefix(), inputSection(), suffix())), help('$help'), messages(message('$message.value')));\n}\nfunction createSection(section, el, root = false) {\n    return (...children) => {\n        const extendable = (extensions) => {\n            const node = !el || typeof el === 'string' ? { $el: el } : el();\n            if (isDOM(node) || isComponent(node)) {\n                if (!node.meta) {\n                    node.meta = { section };\n                }\n                if (children.length && !node.children) {\n                    node.children = [\n                        ...children.map((child) => typeof child === 'string' ? child : child(extensions)),\n                    ];\n                }\n                if (isDOM(node)) {\n                    node.attrs = {\n                        class: `$classes.${section}`,\n                        ...(node.attrs || {}),\n                    };\n                }\n            }\n            return {\n                if: `$slots.${section}`,\n                then: `$slots.${section}`,\n                else: section in extensions\n                    ? extendSchema(node, extensions[section])\n                    : node,\n            };\n        };\n        extendable._s = section;\n        return root ? createRoot(extendable) : extendable;\n    };\n}\n/**\n * Returns an extendable schema root node.\n *\n * @param rootSection - Creates the root node.\n *\n * @returns {@link @formkit/core#FormKitExtendableSchemaRoot | FormKitExtendableSchemaRoot}\n *\n * @internal\n */\nfunction createRoot(rootSection) {\n    return (extensions) => {\n        return [rootSection(extensions)];\n    };\n}\n/**\n * Applies attributes to a given schema section by applying a higher order\n * function that merges a given set of attributes into the node.\n *\n * @param attrs - Attributes to apply to a {@link FormKitSchemaExtendableSection\n * | FormKitSchemaExtendableSection}.\n * @param section - A section to apply attributes to.\n *\n * @returns {@link FormKitSchemaExtendableSection | FormKitSchemaExtendableSection}\n *\n * @public\n */\nfunction $attrs(attrs, section) {\n    const extendable = (extensions) => {\n        const node = section(extensions);\n        const attributes = typeof attrs === 'function' ? attrs() : attrs;\n        if (!isObject(attributes))\n            return node;\n        if (isSlotCondition(node) && isDOM(node.else)) {\n            node.else.attrs = { ...node.else.attrs, ...attributes };\n        }\n        else if (isDOM(node)) {\n            node.attrs = { ...node.attrs, ...attributes };\n        }\n        return node;\n    };\n    extendable._s = section._s;\n    return extendable;\n}\n/**\n * Applies a condition to a given schema section.\n *\n * @param condition - A schema condition to apply to a section.\n * @param then - The section that applies if the condition is true.\n * @param otherwise - (else) The section that applies if the condition is false.\n *\n * @returns {@link FormKitSchemaExtendableSection | FormKitSchemaExtendableSection}\n *\n * @public\n */\nfunction $if(condition, then, otherwise) {\n    const extendable = (extensions) => {\n        const node = then(extensions);\n        if (otherwise ||\n            (isSchemaObject(node) && 'if' in node) ||\n            isSlotCondition(node)) {\n            const conditionalNode = {\n                if: condition,\n                then: node,\n            };\n            if (otherwise) {\n                conditionalNode.else = otherwise(extensions);\n            }\n            return conditionalNode;\n        }\n        else if (isSlotCondition(node)) {\n            Object.assign(node.else, { if: condition });\n        }\n        else if (isSchemaObject(node)) {\n            Object.assign(node, { if: condition });\n        }\n        return node;\n    };\n    extendable._s = token();\n    return extendable;\n}\n/**\n * Applies a condition to a given schema section.\n *\n * @param varName - The name of the variable that holds the current instance.\n * @param inName - The variable we are iterating over.\n * @param section - A section to repeat.\n *\n * @returns {@link FormKitSchemaExtendableSection | FormKitSchemaExtendableSection}\n *\n * @public\n */\nfunction $for(varName, inName, section) {\n    return (extensions) => {\n        const node = section(extensions);\n        if (isSlotCondition(node)) {\n            Object.assign(node.else, { for: [varName, inName] });\n        }\n        else if (isSchemaObject(node)) {\n            Object.assign(node, { for: [varName, inName] });\n        }\n        return node;\n    };\n}\n/**\n * Extends a schema node with a given set of extensions.\n *\n * @param section - A section to apply an extension to.\n * @param extendWith - A partial schema snippet to apply to the section.\n *\n * @returns {@link FormKitSchemaExtendableSection | FormKitSchemaExtendableSection}\n *\n * @public\n */\nfunction $extend(section, extendWith) {\n    const extendable = (extensions) => {\n        const node = section({});\n        if (isSlotCondition(node)) {\n            if (Array.isArray(node.else))\n                return node;\n            node.else = extendSchema(extendSchema(node.else, extendWith), section._s ? extensions[section._s] : {});\n            return node;\n        }\n        return extendSchema(extendSchema(node, extendWith), section._s ? extensions[section._s] : {});\n    };\n    extendable._s = section._s;\n    return extendable;\n}\n/**\n * Creates a root schema section.\n *\n * @param section - A section to make a root from.\n *\n * @returns {@link FormKitSchemaExtendableSection | FormKitSchemaExtendableSection}\n *\n * @public\n */\nfunction $root(section) {\n    return createRoot(section);\n}\n\n/**\n * Input definition for a button.\n * @public\n */\nconst button = {\n    /**\n     * The actual schema of the input, or a function that returns the schema.\n     */\n    schema: outer(messages(message('$message.value')), wrapper(buttonInput(icon('prefix'), prefix(), buttonLabel('$label || $ui.submit.value'), suffix(), icon('suffix'))), help('$help')),\n    /**\n     * The type of node, can be a list, group, or input.\n     */\n    type: 'input',\n    /**\n     * The family of inputs this one belongs too. For example \"text\" and \"email\"\n     * are both part of the \"text\" family. This is primary used for styling.\n     */\n    family: 'button',\n    /**\n     * An array of extra props to accept for this input.\n     */\n    props: [],\n    /**\n     * Additional features that should be added to your input\n     */\n    features: [localize('submit'), ignore],\n};\n\n/**\n * Input definition for a checkbox(ess).\n * @public\n */\nconst checkbox = {\n    /**\n     * The actual schema of the input, or a function that returns the schema.\n     */\n    schema: outer($if('$options == undefined', \n    /**\n     * Single checkbox structure.\n     */\n    boxWrapper(inner(prefix(), box(), decorator(icon('decorator')), suffix()), $extend(boxLabel('$label'), {\n        if: '$label',\n    })), \n    /**\n     * Multi checkbox structure.\n     */\n    fieldset(legend('$label'), help('$help'), boxOptions(boxOption(boxWrapper(inner(prefix(), $extend(box(), {\n        bind: '$option.attrs',\n        attrs: {\n            id: '$option.attrs.id',\n            value: '$option.value',\n            checked: '$fns.isChecked($option.value)',\n        },\n    }), decorator(icon('decorator')), suffix()), $extend(boxLabel('$option.label'), {\n        if: '$option.label',\n    })), boxHelp('$option.help'))))), \n    // Help text only goes under the input when it is a single.\n    $if('$options == undefined && $help', help('$help')), messages(message('$message.value'))),\n    /**\n     * The type of node, can be a list, group, or input.\n     */\n    type: 'input',\n    /**\n     * The family of inputs this one belongs too. For example \"text\" and \"email\"\n     * are both part of the \"text\" family. This is primary used for styling.\n     */\n    family: 'box',\n    /**\n     * An array of extra props to accept for this input.\n     */\n    props: ['options', 'onValue', 'offValue', 'optionsLoader'],\n    /**\n     * Additional features that should be added to your input\n     */\n    features: [\n        options,\n        checkboxes,\n        defaultIcon('decorator', 'checkboxDecorator'),\n    ],\n};\n\n/**\n * Input definition for a file input.\n * @public\n */\nconst file = {\n    /**\n     * The actual schema of the input, or a function that returns the schema.\n     */\n    schema: outer(wrapper(label('$label'), inner(icon('prefix', 'label'), prefix(), fileInput(), fileList(fileItem(icon('fileItem'), fileName('$file.name'), $if('$value.length === 1', fileRemove(icon('fileRemove'), '$ui.remove.value')))), $if('$value.length > 1', fileRemove('$ui.removeAll.value')), noFiles(icon('noFiles'), '$ui.noFiles.value'), suffix(), icon('suffix'))), help('$help'), messages(message('$message.value'))),\n    /**\n     * The type of node, can be a list, group, or input.\n     */\n    type: 'input',\n    /**\n     * The family of inputs this one belongs too. For example \"text\" and \"email\"\n     * are both part of the \"text\" family. This is primary used for styling.\n     */\n    family: 'text',\n    /**\n     * An array of extra props to accept for this input.\n     */\n    props: [],\n    /**\n     * Additional features that should be added to your input\n     */\n    features: [\n        files,\n        defaultIcon('fileItem', 'fileItem'),\n        defaultIcon('fileRemove', 'fileRemove'),\n        defaultIcon('noFiles', 'noFiles'),\n    ],\n};\n\n/**\n * Input definition for a form.\n * @public\n */\nconst form = {\n    /**\n     * The actual schema of the input, or a function that returns the schema.\n     */\n    schema: formInput('$slots.default', messages(message('$message.value')), actions(submitInput())),\n    /**\n     * The type of node, can be a list, group, or input.\n     */\n    type: 'group',\n    /**\n     * An array of extra props to accept for this input.\n     */\n    props: [\n        'actions',\n        'submit',\n        'submitLabel',\n        'submitAttrs',\n        'submitBehavior',\n        'incompleteMessage',\n    ],\n    /**\n     * Additional features that should be added to your input\n     */\n    features: [form$1, disables],\n};\n\n/**\n * Input definition for a group.\n * @public\n */\nconst group = {\n    /**\n     * The actual schema of the input, or a function that returns the schema.\n     */\n    schema: fragment('$slots.default'),\n    /**\n     * The type of node, can be a list, group, or input.\n     */\n    type: 'group',\n    /**\n     * An array of extra props to accept for this input.\n     */\n    props: [],\n    /**\n     * Additional features that should be added to your input\n     */\n    features: [disables],\n};\n\n/**\n * Input definition for a hidden input.\n * @public\n */\nconst hidden = {\n    /**\n     * The actual schema of the input, or a function that returns the schema.\n     */\n    schema: $root(textInput()),\n    /**\n     * The type of node, can be a list, group, or input.\n     */\n    type: 'input',\n    /**\n     * An array of extra props to accept for this input.\n     */\n    props: [],\n    /**\n     * Additional features that should be added to your input\n     */\n    features: [],\n};\n\n/**\n * Input definition for a list.\n * @public\n */\nconst list = {\n    /**\n     * The actual schema of the input, or a function that returns the schema.\n     */\n    schema: fragment('$slots.default'),\n    /**\n     * The type of node, can be a list, group, or input.\n     */\n    type: 'list',\n    /**\n     * An array of extra props to accept for this input.\n     */\n    props: [],\n    /**\n     * Additional features that should be added to your input\n     */\n    features: [disables],\n};\n\n/**\n * Input definition for a radio.\n * @public\n */\nconst radio = {\n    /**\n     * The actual schema of the input, or a function that returns the schema.\n     */\n    schema: outer($if('$options == undefined', \n    /**\n     * Single radio structure.\n     */\n    boxWrapper(inner(prefix(), box(), decorator(icon('decorator')), suffix()), $if('$label', boxLabel('$label'))), \n    /**\n     * Multi radio structure.\n     */\n    fieldset(legend('$label'), help('$help'), boxOptions(boxOption(boxWrapper(inner(prefix(), $extend(box(), {\n        bind: '$option.attrs',\n        attrs: {\n            id: '$option.attrs.id',\n            value: '$option.value',\n            checked: '$fns.isChecked($option.value)',\n        },\n    }), decorator(icon('decorator')), suffix()), $if('$option.label', boxLabel('$option.label'))), boxHelp('$option.help'))))), \n    // Help text only goes under the input when it is a single.\n    $if('$options === undefined && $help', help('$help')), messages(message('$message.value'))),\n    /**\n     * The type of node, can be a list, group, or input.\n     */\n    type: 'input',\n    /**\n     * The family of inputs this one belongs too. For example \"text\" and \"email\"\n     * are both part of the \"text\" family. This is primary used for styling.\n     */\n    family: 'box',\n    /**\n     * An array of extra props to accept for this input.\n     */\n    props: ['options', 'onValue', 'offValue', 'optionsLoader'],\n    /**\n     * Additional features that should be added to your input\n     */\n    features: [\n        disables,\n        options,\n        radios,\n        defaultIcon('decorator', 'radioDecorator'),\n    ],\n};\n\n/**\n * Input definition for a select.\n * @public\n */\nconst select = {\n    /**\n     * The actual schema of the input, or a function that returns the schema.\n     */\n    schema: outer(wrapper(label('$label'), inner(icon('prefix'), prefix(), selectInput$1($if('$slots.default', () => '$slots.default', $if('$slots.option', optionSlot, option('$option.label')))), $if('$attrs.multiple !== undefined', () => '', icon('select')), suffix(), icon('suffix'))), help('$help'), messages(message('$message.value'))),\n    /**\n     * The type of node, can be a list, group, or input.\n     */\n    type: 'input',\n    /**\n     * An array of extra props to accept for this input.\n     */\n    props: ['options', 'placeholder', 'optionsLoader'],\n    /**\n     * Additional features that should be added to your input\n     */\n    features: [options, select$1, defaultIcon('select', 'select')],\n};\n\n/**\n * Input definition for a textarea.\n * @public\n */\nconst textarea = {\n    /**\n     * The actual schema of the input, or a function that returns the schema.\n     */\n    schema: outer(wrapper(label('$label'), inner(icon('prefix', 'label'), prefix(), textareaInput(), suffix(), icon('suffix'))), help('$help'), messages(message('$message.value'))),\n    /**\n     * The type of node, can be a list, group, or input.\n     */\n    type: 'input',\n    /**\n     * An array of extra props to accept for this input.\n     */\n    props: [],\n    /**\n     * Additional features that should be added to your input\n     */\n    features: [initialValue],\n};\n\n/**\n * Input definition for a text.\n * @public\n */\nconst text = {\n    /**\n     * The actual schema of the input, or a function that returns the schema.\n     */\n    schema: outer(wrapper(label('$label'), inner(icon('prefix', 'label'), prefix(), textInput(), suffix(), icon('suffix'))), help('$help'), messages(message('$message.value'))),\n    /**\n     * The type of node, can be a list, group, or input.\n     */\n    type: 'input',\n    /**\n     * The family of inputs this one belongs too. For example \"text\" and \"email\"\n     * are both part of the \"text\" family. This is primary used for styling.\n     */\n    family: 'text',\n    /**\n     * An array of extra props to accept for this input.\n     */\n    props: [],\n    /**\n     * Additional features that should be added to your input\n     */\n    features: [],\n};\n\nvar index = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    button: button,\n    submit: button,\n    checkbox: checkbox,\n    file: file,\n    form: form,\n    group: group,\n    hidden: hidden,\n    list: list,\n    radio: radio,\n    select: select,\n    textarea: textarea,\n    text: text,\n    color: text,\n    date: text,\n    datetimeLocal: text,\n    email: text,\n    month: text,\n    number: text,\n    password: text,\n    search: text,\n    tel: text,\n    time: text,\n    url: text,\n    week: text,\n    range: text\n});\n\nexport { $attrs, $extend, $for, $if, $root, actions, box, boxHelp, boxLabel, boxOption, boxOptions, boxWrapper, button, buttonInput, buttonLabel, checkbox, checkboxes, text as color, composable, createLibraryPlugin, createSection, text as date, text as datetimeLocal, decorator, defaultIcon, disables as disablesChildren, text as email, extendSchema, fieldset, file, fileInput, fileItem, fileList, fileName, fileRemove, files, findSection, form, formInput, form$1 as forms, fragment, group, help, hidden, icon, ignore as ignores, initialValue, inner, index as inputs, isSchemaObject, isSlotCondition, label, legend, list, localize, message, messages, text as month, noFiles, normalizeBoxes, normalizeOptions, text as number, option, optionSlot, options, outer, text as password, prefix, radio, radios, text as range, text as search, select, selectInput$1 as selectInput, select$1 as selects, button as submit, submitInput, suffix, text as tel, text, textInput, textarea, textareaInput, text as time, text as url, useSchema, text as week, wrapper };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}